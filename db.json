{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1533563282505},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1533563282505},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1533563282505},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1533563282506},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1533563282506},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1533563282512},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1533563255366},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1533563282506},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1533563282506},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1533563282506},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1533563282506},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1533563282507},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1533563282507},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1533563282507},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1533563282507},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1533563282507},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1533563282507},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1533563282507},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1533563282508},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1533563282511},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1533563282512},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1533563282512},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1533563282512},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1533563282512},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1533563282512},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1533563282512},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1533563282513},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1533563282510},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1533563282511},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1533563282511},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1533563282511},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1533563282511},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1533563282508},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1533563282508},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1533563282508},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1533563282508},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1533563282508},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1533563282509},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1533563282509},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1533563282509},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1533563282509},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1533563282509},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1533563282510},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1533563282513},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1533563282515},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1533563282520},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1533563282521},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1533563282521},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1533563282521},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1533563282521},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1533563282521},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1533563282522},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1533563282523},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1533563282523},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1533563282524},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1533563282524},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1533563282509},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1533563282509},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1533563282510},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1533563282510},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1533563282510},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1533563282510},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1533563282513},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1533563282513},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1533563282514},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1533563282514},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1533563282514},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1533563282514},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1533563282514},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1533563282514},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1533563282514},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1533563282515},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1533563282515},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1533563282515},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1533563282516},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1533563282516},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1533563282518},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1533563282522},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1533563282522},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1533563282522},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1533563282522},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1533563282522},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1533563282523},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1533563282518},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1533563282517},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1533563282520},{"_id":"public/2018/08/06/hello-world/index.html","hash":"f42d4a4f373e250509a9e1d13f64a6a68c806704","modified":1533563597423},{"_id":"public/archives/index.html","hash":"d99ba2b19b071ed82209dba57af5a25e736878ab","modified":1533563597474},{"_id":"public/archives/2018/index.html","hash":"058a52cd17311967a0f0eaa4aa0adc6ab89349f8","modified":1533563597476},{"_id":"public/archives/2018/08/index.html","hash":"de5c3228667ba8d9d54be7ccd21e60591de37836","modified":1533563597476},{"_id":"public/index.html","hash":"1a4bba857890c9b8ef6038de9ce1b8bf39141c05","modified":1533563597476},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1533563369709},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1533563369709},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1533563369709},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1533563369709},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1533563369709},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1533563369709},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1533563369709},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1533563369709},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1533563369709},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1533563369709},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1533563370035},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1533563370060},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1533563370060},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1533563370060},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1533563370062},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1533563370062},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1533563370063},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1533563370063},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1533563370063},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1533563370063},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1533563370063},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1533563370065},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1533563370065},{"_id":"source/.DS_Store","hash":"cc75fbdb977a72e3c33a32b977ec965c1597d5c5","modified":1533563504512},{"_id":"source/_posts/2018-07-15-spring-aop.md","hash":"b2416e01e18a07908eb9983f2792c1a47ca173e2","modified":1532574175442},{"_id":"source/_posts/2018-07-20-spring-aop2.md","hash":"47fed6344f090ef86329a1114640afd668d328ee","modified":1533135721019},{"_id":"source/_posts/2018-07-21-spring-aop3.md","hash":"f9ee48b62b7e238213e643ca4b1f98c3c9c557fa","modified":1532447683604},{"_id":"source/_posts/2018-07-21-spring-aop4.md","hash":"b8373798fcfa2c448b47ffc9fb5d2f747bb88b13","modified":1532447432529},{"_id":"source/_posts/2018-07-24-spring-aop5.md","hash":"244f3300ca2f2610da52abedc1b29dc82b0fcfd5","modified":1532447714574},{"_id":"public/2018/07/20/2018-07-20-spring-aop2/index.html","hash":"ef6005d9108ff3e55b7461b397d2cdce6eaba911","modified":1533563597477},{"_id":"public/archives/2018/07/index.html","hash":"c0038bde83c755894f75037a70aa6a242b4d6da6","modified":1533563597477},{"_id":"public/2018/07/24/2018-07-24-spring-aop5/index.html","hash":"9c0233ffafaebb72ff15881c2a7a170e1ab0be6e","modified":1533563597477},{"_id":"public/2018/07/21/2018-07-21-spring-aop3/index.html","hash":"0ce3e822e9b1b6a369cb4f1d21ddb183f9dff4fe","modified":1533563597477},{"_id":"public/2018/07/21/2018-07-21-spring-aop4/index.html","hash":"5ca7724708195a7b693b79db969c01cdc8a58547","modified":1533563597477},{"_id":"public/2018/07/15/2018-07-15-spring-aop/index.html","hash":"af80cebd49d78a3c5fb9049272e9a476994996d0","modified":1533563597477}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-08-06T13:47:35.365Z","updated":"2018-08-06T13:47:35.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkic192u0000ukyazm4viphv","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"layout":"post","title":"Spring AOP (1)","subtitle":"1. AOP를 사용해야 하는 이유","date":"2018-07-15T13:28:13.000Z","background":"/img/posts/06.jpg","_content":"\n\n\n개발 하던 중에 Custom Annotation을 구현해서 사용해야 할 일이 생겼다. \nCustom Annotation을 구현하기 위해선 Spring AOP와 AspectJ의 기능을 사용하여 구현해야 하는데, 이번 기회에  다시 한번 Spring AOP에 대해 정리 해보려고 이 포스팅을 기록 하게 되었다.\n\n\n\n# 들어가면서..\n\n\n\n정리하고자 하는 내용\n\n1. AOP를 사용해야하는 이유\n2. AOP에서 사용되는 용어 정리\n3. \u0010Spring AOP\n4. AspectJ\n5. Custom Annotation\n\n\n\n내용이 많아 질 것 같아서 위의 순서대로 별도로 포스트를 작성할 예정이다.\n\n\n\n# 1. AOP를 사용 해야 하는 이유\n\n## AOP란?\n\n AOP(Aspect Oriented Programming) 란 우리말로 관점지향 프로그래밍이라고 한다.\n객체지향의 5대원칙 중에는 단일책임의 원칙 (Single Responsibility Programming 이하 SRP) 라는 원칙이 있다.\n하나의 클래스, 메서드는 하나의 역할만을 가진다는 원칙이다. 하지만 객체지향 프로그래밍(OOP)를 기반으로 로직을 설계하다 보면 단일책임의 원칙을 지키지 못하는 경우가 다반사로 발생한다.\n\n예를 들어 결제를 담당하는 소스가 있다고 할 때\n\n~~~java\npublic PaymentResponse doPaymentByCash(PaymentRequest paymentRequest) {\n    \n    //결제 요청에 대한 현금 결제처리\n    PaymentResponse response = paymentModule.paymentCash(paymentRequest);\n    \n    //결제 요청에 대한 로그 데이터 DB Insert\n    paymentLogRepository.insert(paymentRequest, response);\n    \n    return response;\n}\n\npublic PaymentResponse doPaymentByCreditCard(PaymentRequest paymentRequest) {\n    \n    //결제 요청에 대한 카드 결제 처리\n    PaymentResponse response = paymentModule.paymentCreditCard(paymentRequest);\n    \n    //결제 요청에 대한 로그 데이터 DB Insert\n    paymentLogRepository.insert(paymentRequest, response);\n    \n    return response;\n}\n~~~\n\n\n\n위의 doPayment\u0010ByXX라는 메서드는 실제 결제 요청 데이터에 대해 결제를 수행하는 메서드이다.\n결제 처리 아랫쪽의 로그 데이터를 DB에 저장하는 부분은 doPaymentByXX라는 메서드 명에 어울리지 않는다.\n굳이 변경하자면 doPaymentByXXWithLog 정도로 메서드명을 변경해야 의미가 맞겠지만, SRP의 원칙에 맞지 않는다고 생각한다.\n\n여기서 로그 데이터를 삽입하는 로직은 결제 로직에 대해서는 횡단 로직으로 다른 관심사로 볼 수 있다.\n뿐만 아니라 결제 수단 별로 나뉘어진 메서드에 대해 중복되는 로직으로 볼 수 있다.\n\n이런 경우 우리는 결제 로그 삽입 이라는 다른 관심사로 분리하여 코드를 작성 할 수 있다.\n\n그리고 이렇게 횡단 관심사로 분리되어진 공통 로직을 프로그램이 \n컴파일 시에, 런타임 시에, 클래스가 로드되는 시점에 각 로직을 삽입 해주는 것을 AOP라는 개념으로 볼 수 있다.\n\n\n\nAOP를 적용한다면 아래처럼 코드를 만들 수 있겠다.\n\n~~~java\npublic PaymentResponse doPaymentByCash(PaymentRequest paymentRequest) {\n    \n    //결제 요청에 대한 현금 결제처리\n    PaymentResponse response = paymentModule.paymentCash(paymentRequest);\n    return response;\n}\n\npublic PaymentResponse doPaymentByCreditCard(PaymentRequest paymentRequest) {\n    \n    //결제 요청에 대한 카드 결제 처리\n    PaymentResponse response = paymentModule.paymentCreditCard(paymentRequest);\n    return response;\n}\n~~~\n\n\n\n~~~java\n@Aspect\n@Component\npublic class PaymentLogAdvisor {\n    \n    @Autowired\n    private PaymentLogRepository paymentLogRepository;\n    \n    @AfterReturning(\"execution(* com.example.payment.doPayment*(..))\", returning=\"paymentResponse\")\n    public void afterPayment(JoinPoint jp, PaymentResponse paymentResponse) {\n        Object[] args = jp.getArgs();\n        if(args.length == 0) {\n            throw new illegalArgumentException(\"argument is none\");\n        }\n        \n        if(!(args[0] instanceof PaymentRequest)) {\n            throw new Exception(\"argument is not PaymentRequest Type\");\n        }\n        \n        PaymentRequest paymentRequest = (PaymentRequest) args[0];\n        \n        //결제 로그 삽입\n        paymentLogRepository.insert(paymentRequest, paymentResponse);\n    }\n}\n~~~\n\n","source":"_posts/2018-07-15-spring-aop.md","raw":"---\nlayout: post\ntitle:  \"Spring AOP (1)\"\nsubtitle: \"1. AOP를 사용해야 하는 이유\"\ndate:   2018-07-15 22:28:13 +0900\nbackground: '/img/posts/06.jpg'\n---\n\n\n\n개발 하던 중에 Custom Annotation을 구현해서 사용해야 할 일이 생겼다. \nCustom Annotation을 구현하기 위해선 Spring AOP와 AspectJ의 기능을 사용하여 구현해야 하는데, 이번 기회에  다시 한번 Spring AOP에 대해 정리 해보려고 이 포스팅을 기록 하게 되었다.\n\n\n\n# 들어가면서..\n\n\n\n정리하고자 하는 내용\n\n1. AOP를 사용해야하는 이유\n2. AOP에서 사용되는 용어 정리\n3. \u0010Spring AOP\n4. AspectJ\n5. Custom Annotation\n\n\n\n내용이 많아 질 것 같아서 위의 순서대로 별도로 포스트를 작성할 예정이다.\n\n\n\n# 1. AOP를 사용 해야 하는 이유\n\n## AOP란?\n\n AOP(Aspect Oriented Programming) 란 우리말로 관점지향 프로그래밍이라고 한다.\n객체지향의 5대원칙 중에는 단일책임의 원칙 (Single Responsibility Programming 이하 SRP) 라는 원칙이 있다.\n하나의 클래스, 메서드는 하나의 역할만을 가진다는 원칙이다. 하지만 객체지향 프로그래밍(OOP)를 기반으로 로직을 설계하다 보면 단일책임의 원칙을 지키지 못하는 경우가 다반사로 발생한다.\n\n예를 들어 결제를 담당하는 소스가 있다고 할 때\n\n~~~java\npublic PaymentResponse doPaymentByCash(PaymentRequest paymentRequest) {\n    \n    //결제 요청에 대한 현금 결제처리\n    PaymentResponse response = paymentModule.paymentCash(paymentRequest);\n    \n    //결제 요청에 대한 로그 데이터 DB Insert\n    paymentLogRepository.insert(paymentRequest, response);\n    \n    return response;\n}\n\npublic PaymentResponse doPaymentByCreditCard(PaymentRequest paymentRequest) {\n    \n    //결제 요청에 대한 카드 결제 처리\n    PaymentResponse response = paymentModule.paymentCreditCard(paymentRequest);\n    \n    //결제 요청에 대한 로그 데이터 DB Insert\n    paymentLogRepository.insert(paymentRequest, response);\n    \n    return response;\n}\n~~~\n\n\n\n위의 doPayment\u0010ByXX라는 메서드는 실제 결제 요청 데이터에 대해 결제를 수행하는 메서드이다.\n결제 처리 아랫쪽의 로그 데이터를 DB에 저장하는 부분은 doPaymentByXX라는 메서드 명에 어울리지 않는다.\n굳이 변경하자면 doPaymentByXXWithLog 정도로 메서드명을 변경해야 의미가 맞겠지만, SRP의 원칙에 맞지 않는다고 생각한다.\n\n여기서 로그 데이터를 삽입하는 로직은 결제 로직에 대해서는 횡단 로직으로 다른 관심사로 볼 수 있다.\n뿐만 아니라 결제 수단 별로 나뉘어진 메서드에 대해 중복되는 로직으로 볼 수 있다.\n\n이런 경우 우리는 결제 로그 삽입 이라는 다른 관심사로 분리하여 코드를 작성 할 수 있다.\n\n그리고 이렇게 횡단 관심사로 분리되어진 공통 로직을 프로그램이 \n컴파일 시에, 런타임 시에, 클래스가 로드되는 시점에 각 로직을 삽입 해주는 것을 AOP라는 개념으로 볼 수 있다.\n\n\n\nAOP를 적용한다면 아래처럼 코드를 만들 수 있겠다.\n\n~~~java\npublic PaymentResponse doPaymentByCash(PaymentRequest paymentRequest) {\n    \n    //결제 요청에 대한 현금 결제처리\n    PaymentResponse response = paymentModule.paymentCash(paymentRequest);\n    return response;\n}\n\npublic PaymentResponse doPaymentByCreditCard(PaymentRequest paymentRequest) {\n    \n    //결제 요청에 대한 카드 결제 처리\n    PaymentResponse response = paymentModule.paymentCreditCard(paymentRequest);\n    return response;\n}\n~~~\n\n\n\n~~~java\n@Aspect\n@Component\npublic class PaymentLogAdvisor {\n    \n    @Autowired\n    private PaymentLogRepository paymentLogRepository;\n    \n    @AfterReturning(\"execution(* com.example.payment.doPayment*(..))\", returning=\"paymentResponse\")\n    public void afterPayment(JoinPoint jp, PaymentResponse paymentResponse) {\n        Object[] args = jp.getArgs();\n        if(args.length == 0) {\n            throw new illegalArgumentException(\"argument is none\");\n        }\n        \n        if(!(args[0] instanceof PaymentRequest)) {\n            throw new Exception(\"argument is not PaymentRequest Type\");\n        }\n        \n        PaymentRequest paymentRequest = (PaymentRequest) args[0];\n        \n        //결제 로그 삽입\n        paymentLogRepository.insert(paymentRequest, paymentResponse);\n    }\n}\n~~~\n\n","slug":"2018-07-15-spring-aop","published":1,"updated":"2018-07-26T03:02:55.442Z","comments":1,"photos":[],"link":"","_id":"cjkic64ol0000vcyajb249auo","content":"<p>개발 하던 중에 Custom Annotation을 구현해서 사용해야 할 일이 생겼다.<br>Custom Annotation을 구현하기 위해선 Spring AOP와 AspectJ의 기능을 사용하여 구현해야 하는데, 이번 기회에  다시 한번 Spring AOP에 대해 정리 해보려고 이 포스팅을 기록 하게 되었다.</p>\n<h1 id=\"들어가면서\"><a href=\"#들어가면서\" class=\"headerlink\" title=\"들어가면서..\"></a>들어가면서..</h1><p>정리하고자 하는 내용</p>\n<ol>\n<li>AOP를 사용해야하는 이유</li>\n<li>AOP에서 사용되는 용어 정리</li>\n<li>\u0010Spring AOP</li>\n<li>AspectJ</li>\n<li>Custom Annotation</li>\n</ol>\n<p>내용이 많아 질 것 같아서 위의 순서대로 별도로 포스트를 작성할 예정이다.</p>\n<h1 id=\"1-AOP를-사용-해야-하는-이유\"><a href=\"#1-AOP를-사용-해야-하는-이유\" class=\"headerlink\" title=\"1. AOP를 사용 해야 하는 이유\"></a>1. AOP를 사용 해야 하는 이유</h1><h2 id=\"AOP란\"><a href=\"#AOP란\" class=\"headerlink\" title=\"AOP란?\"></a>AOP란?</h2><p> AOP(Aspect Oriented Programming) 란 우리말로 관점지향 프로그래밍이라고 한다.<br>객체지향의 5대원칙 중에는 단일책임의 원칙 (Single Responsibility Programming 이하 SRP) 라는 원칙이 있다.<br>하나의 클래스, 메서드는 하나의 역할만을 가진다는 원칙이다. 하지만 객체지향 프로그래밍(OOP)를 기반으로 로직을 설계하다 보면 단일책임의 원칙을 지키지 못하는 경우가 다반사로 발생한다.</p>\n<p>예를 들어 결제를 담당하는 소스가 있다고 할 때</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PaymentResponse <span class=\"title\">doPaymentByCash</span><span class=\"params\">(PaymentRequest paymentRequest)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//결제 요청에 대한 현금 결제처리</span></span><br><span class=\"line\">    PaymentResponse response = paymentModule.paymentCash(paymentRequest);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//결제 요청에 대한 로그 데이터 DB Insert</span></span><br><span class=\"line\">    paymentLogRepository.insert(paymentRequest, response);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PaymentResponse <span class=\"title\">doPaymentByCreditCard</span><span class=\"params\">(PaymentRequest paymentRequest)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//결제 요청에 대한 카드 결제 처리</span></span><br><span class=\"line\">    PaymentResponse response = paymentModule.paymentCreditCard(paymentRequest);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//결제 요청에 대한 로그 데이터 DB Insert</span></span><br><span class=\"line\">    paymentLogRepository.insert(paymentRequest, response);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>위의 doPayment\u0010ByXX라는 메서드는 실제 결제 요청 데이터에 대해 결제를 수행하는 메서드이다.<br>결제 처리 아랫쪽의 로그 데이터를 DB에 저장하는 부분은 doPaymentByXX라는 메서드 명에 어울리지 않는다.<br>굳이 변경하자면 doPaymentByXXWithLog 정도로 메서드명을 변경해야 의미가 맞겠지만, SRP의 원칙에 맞지 않는다고 생각한다.</p>\n<p>여기서 로그 데이터를 삽입하는 로직은 결제 로직에 대해서는 횡단 로직으로 다른 관심사로 볼 수 있다.<br>뿐만 아니라 결제 수단 별로 나뉘어진 메서드에 대해 중복되는 로직으로 볼 수 있다.</p>\n<p>이런 경우 우리는 결제 로그 삽입 이라는 다른 관심사로 분리하여 코드를 작성 할 수 있다.</p>\n<p>그리고 이렇게 횡단 관심사로 분리되어진 공통 로직을 프로그램이<br>컴파일 시에, 런타임 시에, 클래스가 로드되는 시점에 각 로직을 삽입 해주는 것을 AOP라는 개념으로 볼 수 있다.</p>\n<p>AOP를 적용한다면 아래처럼 코드를 만들 수 있겠다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PaymentResponse <span class=\"title\">doPaymentByCash</span><span class=\"params\">(PaymentRequest paymentRequest)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//결제 요청에 대한 현금 결제처리</span></span><br><span class=\"line\">    PaymentResponse response = paymentModule.paymentCash(paymentRequest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PaymentResponse <span class=\"title\">doPaymentByCreditCard</span><span class=\"params\">(PaymentRequest paymentRequest)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//결제 요청에 대한 카드 결제 처리</span></span><br><span class=\"line\">    PaymentResponse response = paymentModule.paymentCreditCard(paymentRequest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PaymentLogAdvisor</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PaymentLogRepository paymentLogRepository;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning</span>(<span class=\"string\">\"execution(* com.example.payment.doPayment*(..))\"</span>, returning=<span class=\"string\">\"paymentResponse\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPayment</span><span class=\"params\">(JoinPoint jp, PaymentResponse paymentResponse)</span> </span>&#123;</span><br><span class=\"line\">        Object[] args = jp.getArgs();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(args.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> illegalArgumentException(<span class=\"string\">\"argument is none\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(args[<span class=\"number\">0</span>] <span class=\"keyword\">instanceof</span> PaymentRequest)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"argument is not PaymentRequest Type\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        PaymentRequest paymentRequest = (PaymentRequest) args[<span class=\"number\">0</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//결제 로그 삽입</span></span><br><span class=\"line\">        paymentLogRepository.insert(paymentRequest, paymentResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>개발 하던 중에 Custom Annotation을 구현해서 사용해야 할 일이 생겼다.<br>Custom Annotation을 구현하기 위해선 Spring AOP와 AspectJ의 기능을 사용하여 구현해야 하는데, 이번 기회에  다시 한번 Spring AOP에 대해 정리 해보려고 이 포스팅을 기록 하게 되었다.</p>\n<h1 id=\"들어가면서\"><a href=\"#들어가면서\" class=\"headerlink\" title=\"들어가면서..\"></a>들어가면서..</h1><p>정리하고자 하는 내용</p>\n<ol>\n<li>AOP를 사용해야하는 이유</li>\n<li>AOP에서 사용되는 용어 정리</li>\n<li>\u0010Spring AOP</li>\n<li>AspectJ</li>\n<li>Custom Annotation</li>\n</ol>\n<p>내용이 많아 질 것 같아서 위의 순서대로 별도로 포스트를 작성할 예정이다.</p>\n<h1 id=\"1-AOP를-사용-해야-하는-이유\"><a href=\"#1-AOP를-사용-해야-하는-이유\" class=\"headerlink\" title=\"1. AOP를 사용 해야 하는 이유\"></a>1. AOP를 사용 해야 하는 이유</h1><h2 id=\"AOP란\"><a href=\"#AOP란\" class=\"headerlink\" title=\"AOP란?\"></a>AOP란?</h2><p> AOP(Aspect Oriented Programming) 란 우리말로 관점지향 프로그래밍이라고 한다.<br>객체지향의 5대원칙 중에는 단일책임의 원칙 (Single Responsibility Programming 이하 SRP) 라는 원칙이 있다.<br>하나의 클래스, 메서드는 하나의 역할만을 가진다는 원칙이다. 하지만 객체지향 프로그래밍(OOP)를 기반으로 로직을 설계하다 보면 단일책임의 원칙을 지키지 못하는 경우가 다반사로 발생한다.</p>\n<p>예를 들어 결제를 담당하는 소스가 있다고 할 때</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PaymentResponse <span class=\"title\">doPaymentByCash</span><span class=\"params\">(PaymentRequest paymentRequest)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//결제 요청에 대한 현금 결제처리</span></span><br><span class=\"line\">    PaymentResponse response = paymentModule.paymentCash(paymentRequest);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//결제 요청에 대한 로그 데이터 DB Insert</span></span><br><span class=\"line\">    paymentLogRepository.insert(paymentRequest, response);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PaymentResponse <span class=\"title\">doPaymentByCreditCard</span><span class=\"params\">(PaymentRequest paymentRequest)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//결제 요청에 대한 카드 결제 처리</span></span><br><span class=\"line\">    PaymentResponse response = paymentModule.paymentCreditCard(paymentRequest);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//결제 요청에 대한 로그 데이터 DB Insert</span></span><br><span class=\"line\">    paymentLogRepository.insert(paymentRequest, response);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>위의 doPayment\u0010ByXX라는 메서드는 실제 결제 요청 데이터에 대해 결제를 수행하는 메서드이다.<br>결제 처리 아랫쪽의 로그 데이터를 DB에 저장하는 부분은 doPaymentByXX라는 메서드 명에 어울리지 않는다.<br>굳이 변경하자면 doPaymentByXXWithLog 정도로 메서드명을 변경해야 의미가 맞겠지만, SRP의 원칙에 맞지 않는다고 생각한다.</p>\n<p>여기서 로그 데이터를 삽입하는 로직은 결제 로직에 대해서는 횡단 로직으로 다른 관심사로 볼 수 있다.<br>뿐만 아니라 결제 수단 별로 나뉘어진 메서드에 대해 중복되는 로직으로 볼 수 있다.</p>\n<p>이런 경우 우리는 결제 로그 삽입 이라는 다른 관심사로 분리하여 코드를 작성 할 수 있다.</p>\n<p>그리고 이렇게 횡단 관심사로 분리되어진 공통 로직을 프로그램이<br>컴파일 시에, 런타임 시에, 클래스가 로드되는 시점에 각 로직을 삽입 해주는 것을 AOP라는 개념으로 볼 수 있다.</p>\n<p>AOP를 적용한다면 아래처럼 코드를 만들 수 있겠다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PaymentResponse <span class=\"title\">doPaymentByCash</span><span class=\"params\">(PaymentRequest paymentRequest)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//결제 요청에 대한 현금 결제처리</span></span><br><span class=\"line\">    PaymentResponse response = paymentModule.paymentCash(paymentRequest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PaymentResponse <span class=\"title\">doPaymentByCreditCard</span><span class=\"params\">(PaymentRequest paymentRequest)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//결제 요청에 대한 카드 결제 처리</span></span><br><span class=\"line\">    PaymentResponse response = paymentModule.paymentCreditCard(paymentRequest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PaymentLogAdvisor</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PaymentLogRepository paymentLogRepository;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning</span>(<span class=\"string\">\"execution(* com.example.payment.doPayment*(..))\"</span>, returning=<span class=\"string\">\"paymentResponse\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPayment</span><span class=\"params\">(JoinPoint jp, PaymentResponse paymentResponse)</span> </span>&#123;</span><br><span class=\"line\">        Object[] args = jp.getArgs();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(args.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> illegalArgumentException(<span class=\"string\">\"argument is none\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(args[<span class=\"number\">0</span>] <span class=\"keyword\">instanceof</span> PaymentRequest)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"argument is not PaymentRequest Type\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        PaymentRequest paymentRequest = (PaymentRequest) args[<span class=\"number\">0</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//결제 로그 삽입</span></span><br><span class=\"line\">        paymentLogRepository.insert(paymentRequest, paymentResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Spring AOP (2)","subtitle":"2. AOP에서 사용되는 용어 정리","date":"2018-07-20T14:06:13.000Z","background":"/img/posts/06.jpg","_content":"\n앞선 포스팅에선 간단하게 AOP의 필요성과 간단한 예제 코드를 통해 풀어보는 방법을 적어보았다.\n\n여기서는 AOP의 개념적인 의미에 대해서 정리해보고 AOP 세상에서 사용되는 용어들에 대한 정리 해보았다.\n\n\n\n# AOP(Aspect Oriented Programming) 란?\n\n## AOP의 등장배경\n\n AOP의 등장배경을 알기 위해 프로그래밍의 패러다임을 살펴보면, 오랜 옛날에는 절차적 프로그래밍(procedural programming)이 있었다. 이는 기계에 필요한 기능, 로직을 설계하던 프로그래밍 방식이었고, 쉽게 위에서 아래로 실행 되는 구조를 가지고 있었다. 이전에는 규모가 작았기 때문에 프로그램을 효율적으로 작성하는 방식에 대해서는 대두되지 않았다. 하지만  고 수준의 Enterprise System을 개발하는데에는 무리가 있고, 유지보수의 어려움, 스파게티 코드를 양산하는 프로그래밍 방식이었다.  \n\n 수 년에 걸쳐 프로그래밍의 패러다임은 객체 지향 프로그래밍 (Object Oriented Programming) 방식을 도입 하였다. 객체지향 프로그래밍 방식은 목표한 기능을 수행하기 위해 기능적, 개념적 단위를 설계하고 이를 class라는 추상화 된 명세를 통해 독립된 기능을 수행하는 프로그래밍 방식이다. 또한 객체들이 유기적으로 협력하여 로직을 수행할 수 있고 유지보수, 확장성이 용이한 프로그래밍 방식이다.\n\n 하지만 객체지향 프로그래밍 방식에도 헛점은 있었다. \n실제 핵심 로직을 수행하는 Method에서 아무리 설계를 잘하더라도 분리된 모듈로 작성하기 힘든 부분이 발생한다. `횡단 관심사 (CrossCutting Concerns)`이라 한다. 횡단 관심사의 예시로는 로깅, 인증, 트랜잭션과 같은 공통적이고 중복되는 내용들이 있다. 이는 중복코드를 발생 시키고 Method의 핵심 로직을 파악하기 어렵게 하고, 코드 가독성을 떨어뜨리며, 유지보수의 난이도를 높이는 요소들이다. 이를 해결 하기 위해 AOP(Aspect Oriented Programming) 이라는 개념이 탄생하였다.\n\n\n\n## AOP의 개념\n\n 실제 핵심 로직(Core Concern)을 수행하면서 발생하는 `횡단 관심사 (CrossCutting Concerns)` 를 한데 모아 처리하는 것을 AOP라 한다. AOP를 사용하기 위해 Aspect Class를 별도로 지정하여 실행 Method의 조인포인트(Join Point)를 기반으로 포인트 컷(Point Cut)을 설정하여 실제 모듈의 핵심 로직에 관여하지 않고도 횡단 로직을 처리 할 수 있도록 해준다.\n\n![횡단관심사와 핵심로직](https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/cross-cutting-concern.png)\n\nAOP는 이러한 횡단 관심사 로직을 Method가 실행되는 조인포인트에 코드를 적용 시켜, 실제 메소드에 코드가 있는 것 처럼 실행 하도록 해준다. 이러한 개념을 위빙(Weaving)이라고 한다.\n\nAOP에서는 이러한 기능을 Aspect라는 이름으로 부르고 있다. \nAspect를 정의 하자면, \n실제 모듈에 대한 핵심기능을 담고 있지는 않지만 모듈이나 Method를 구성하는 한가지 요소이고, 핵심기능에 부가되어 의미를 갖는 모듈을 가르킨다. \n\n이러한 설명을 보게 되면은 AOP는 OOP를 대체 할 수 있는 획기적인 방법론이라고 생각할 수 있다.\nAOP는 OOP를 대체 하는 것이 아닌 OOP의 가치를 더 올려 줄 수 있는 보조적이고 상호 보완적인 관계라고 생각 해야 한다.\n\n\n\n# AOP 에서 사용되는 용어들\n\n## Join Point\n\n말그대로 Join + Point이다. `횡단관심사(Cross Cutting Concern)` 로 분리 된 로직이 끼어들 수 있는 (조인할 수 있는) 위치 또는 시점을 일컫는 말이다.\n\n## Advice\n\n`횡단관심사(Cross Cutting Concern)` 으로 분리 된 로직에 대한 코드\nAspect로 분리 되어 실행 시, 위빙되어 구체적인 처리를 하는 로직을 일컫는 단어\n\n## Point Cut\n\n말그대로 (Join) Point + cut이다. Join Point는 모든 메소드에 있는 위치 또는 시점을 일컫는 말이지만,\nPoint cut은 공통으로 적용할 Join Point를 표현식 같은 기능을 사용하여 하나로 묶어내는 역할을 한다. 실제 Advice코드가 적용 될 지점을 의미 하는 단어\n\n## Weaving\n\nAdvice 코드를 핵심 로직의 Point cut에 적용하는 것을 의미하는 단어이다.\n즉, Advice로 분리한 코드를 핵심 로직에 다시 합치는 일이다.\n방법에 따라 \n* 런타임 시, Proxy로 생성하며 코드를 합치는 방법\n* 컴파일 시, 클래스 로드 시, 바이트 코드를 조작하여 실제 코드를 끼워 넣는 방법\n이 있다.\n\n## Aspect\n\n여러 객체에 공통으로 적용되는 관심 사항을 Aspect라고 한다.\n보안, 트랜잭션, 로깅등이 대표적인 예이다.\nAspect는 AOP의 핵심 단위 이며 Advice + Point cut = Aspect 이다.\n\n## Target\n\n핵심 로직을 구현하는 클래스 또는 객체\nAOP를 적용하여 Advice를 받을 대상을 의미하는 단어이다.\n\n## Advisor\n\nAdvice 코드와 Pointcut을 합쳐놓은 것을 Advisor라고 부른다.\n공통 관심사 코드를 뽑아서 하나의 클래스에 담은 것이다.\n\n\n\n------\n\n참고\n\nhttps://jongmin92.github.io/2018/02/17/Spring/spring-aop/#aop%EC%9D%98-%EB%93%B1%EC%9E%A5-%EB%B0%B0%EA%B2%BD\n\nhttp://blog.naver.com/PostView.nhn?blogId=tmondev&logNo=220556587811\n\nhttp://www.zdnet.co.kr/news/news_view.asp?artice_id=00000039147106","source":"_posts/2018-07-20-spring-aop2.md","raw":"---\nlayout: post\ntitle:  \"Spring AOP (2)\"\nsubtitle: \"2. AOP에서 사용되는 용어 정리\"\ndate:   2018-07-20 23:06:13 +0900\nbackground: '/img/posts/06.jpg'\n---\n\n앞선 포스팅에선 간단하게 AOP의 필요성과 간단한 예제 코드를 통해 풀어보는 방법을 적어보았다.\n\n여기서는 AOP의 개념적인 의미에 대해서 정리해보고 AOP 세상에서 사용되는 용어들에 대한 정리 해보았다.\n\n\n\n# AOP(Aspect Oriented Programming) 란?\n\n## AOP의 등장배경\n\n AOP의 등장배경을 알기 위해 프로그래밍의 패러다임을 살펴보면, 오랜 옛날에는 절차적 프로그래밍(procedural programming)이 있었다. 이는 기계에 필요한 기능, 로직을 설계하던 프로그래밍 방식이었고, 쉽게 위에서 아래로 실행 되는 구조를 가지고 있었다. 이전에는 규모가 작았기 때문에 프로그램을 효율적으로 작성하는 방식에 대해서는 대두되지 않았다. 하지만  고 수준의 Enterprise System을 개발하는데에는 무리가 있고, 유지보수의 어려움, 스파게티 코드를 양산하는 프로그래밍 방식이었다.  \n\n 수 년에 걸쳐 프로그래밍의 패러다임은 객체 지향 프로그래밍 (Object Oriented Programming) 방식을 도입 하였다. 객체지향 프로그래밍 방식은 목표한 기능을 수행하기 위해 기능적, 개념적 단위를 설계하고 이를 class라는 추상화 된 명세를 통해 독립된 기능을 수행하는 프로그래밍 방식이다. 또한 객체들이 유기적으로 협력하여 로직을 수행할 수 있고 유지보수, 확장성이 용이한 프로그래밍 방식이다.\n\n 하지만 객체지향 프로그래밍 방식에도 헛점은 있었다. \n실제 핵심 로직을 수행하는 Method에서 아무리 설계를 잘하더라도 분리된 모듈로 작성하기 힘든 부분이 발생한다. `횡단 관심사 (CrossCutting Concerns)`이라 한다. 횡단 관심사의 예시로는 로깅, 인증, 트랜잭션과 같은 공통적이고 중복되는 내용들이 있다. 이는 중복코드를 발생 시키고 Method의 핵심 로직을 파악하기 어렵게 하고, 코드 가독성을 떨어뜨리며, 유지보수의 난이도를 높이는 요소들이다. 이를 해결 하기 위해 AOP(Aspect Oriented Programming) 이라는 개념이 탄생하였다.\n\n\n\n## AOP의 개념\n\n 실제 핵심 로직(Core Concern)을 수행하면서 발생하는 `횡단 관심사 (CrossCutting Concerns)` 를 한데 모아 처리하는 것을 AOP라 한다. AOP를 사용하기 위해 Aspect Class를 별도로 지정하여 실행 Method의 조인포인트(Join Point)를 기반으로 포인트 컷(Point Cut)을 설정하여 실제 모듈의 핵심 로직에 관여하지 않고도 횡단 로직을 처리 할 수 있도록 해준다.\n\n![횡단관심사와 핵심로직](https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/cross-cutting-concern.png)\n\nAOP는 이러한 횡단 관심사 로직을 Method가 실행되는 조인포인트에 코드를 적용 시켜, 실제 메소드에 코드가 있는 것 처럼 실행 하도록 해준다. 이러한 개념을 위빙(Weaving)이라고 한다.\n\nAOP에서는 이러한 기능을 Aspect라는 이름으로 부르고 있다. \nAspect를 정의 하자면, \n실제 모듈에 대한 핵심기능을 담고 있지는 않지만 모듈이나 Method를 구성하는 한가지 요소이고, 핵심기능에 부가되어 의미를 갖는 모듈을 가르킨다. \n\n이러한 설명을 보게 되면은 AOP는 OOP를 대체 할 수 있는 획기적인 방법론이라고 생각할 수 있다.\nAOP는 OOP를 대체 하는 것이 아닌 OOP의 가치를 더 올려 줄 수 있는 보조적이고 상호 보완적인 관계라고 생각 해야 한다.\n\n\n\n# AOP 에서 사용되는 용어들\n\n## Join Point\n\n말그대로 Join + Point이다. `횡단관심사(Cross Cutting Concern)` 로 분리 된 로직이 끼어들 수 있는 (조인할 수 있는) 위치 또는 시점을 일컫는 말이다.\n\n## Advice\n\n`횡단관심사(Cross Cutting Concern)` 으로 분리 된 로직에 대한 코드\nAspect로 분리 되어 실행 시, 위빙되어 구체적인 처리를 하는 로직을 일컫는 단어\n\n## Point Cut\n\n말그대로 (Join) Point + cut이다. Join Point는 모든 메소드에 있는 위치 또는 시점을 일컫는 말이지만,\nPoint cut은 공통으로 적용할 Join Point를 표현식 같은 기능을 사용하여 하나로 묶어내는 역할을 한다. 실제 Advice코드가 적용 될 지점을 의미 하는 단어\n\n## Weaving\n\nAdvice 코드를 핵심 로직의 Point cut에 적용하는 것을 의미하는 단어이다.\n즉, Advice로 분리한 코드를 핵심 로직에 다시 합치는 일이다.\n방법에 따라 \n* 런타임 시, Proxy로 생성하며 코드를 합치는 방법\n* 컴파일 시, 클래스 로드 시, 바이트 코드를 조작하여 실제 코드를 끼워 넣는 방법\n이 있다.\n\n## Aspect\n\n여러 객체에 공통으로 적용되는 관심 사항을 Aspect라고 한다.\n보안, 트랜잭션, 로깅등이 대표적인 예이다.\nAspect는 AOP의 핵심 단위 이며 Advice + Point cut = Aspect 이다.\n\n## Target\n\n핵심 로직을 구현하는 클래스 또는 객체\nAOP를 적용하여 Advice를 받을 대상을 의미하는 단어이다.\n\n## Advisor\n\nAdvice 코드와 Pointcut을 합쳐놓은 것을 Advisor라고 부른다.\n공통 관심사 코드를 뽑아서 하나의 클래스에 담은 것이다.\n\n\n\n------\n\n참고\n\nhttps://jongmin92.github.io/2018/02/17/Spring/spring-aop/#aop%EC%9D%98-%EB%93%B1%EC%9E%A5-%EB%B0%B0%EA%B2%BD\n\nhttp://blog.naver.com/PostView.nhn?blogId=tmondev&logNo=220556587811\n\nhttp://www.zdnet.co.kr/news/news_view.asp?artice_id=00000039147106","slug":"2018-07-20-spring-aop2","published":1,"updated":"2018-08-01T15:02:01.019Z","comments":1,"photos":[],"link":"","_id":"cjkic64or0001vcyag8jhkc6r","content":"<p>앞선 포스팅에선 간단하게 AOP의 필요성과 간단한 예제 코드를 통해 풀어보는 방법을 적어보았다.</p>\n<p>여기서는 AOP의 개념적인 의미에 대해서 정리해보고 AOP 세상에서 사용되는 용어들에 대한 정리 해보았다.</p>\n<h1 id=\"AOP-Aspect-Oriented-Programming-란\"><a href=\"#AOP-Aspect-Oriented-Programming-란\" class=\"headerlink\" title=\"AOP(Aspect Oriented Programming) 란?\"></a>AOP(Aspect Oriented Programming) 란?</h1><h2 id=\"AOP의-등장배경\"><a href=\"#AOP의-등장배경\" class=\"headerlink\" title=\"AOP의 등장배경\"></a>AOP의 등장배경</h2><p> AOP의 등장배경을 알기 위해 프로그래밍의 패러다임을 살펴보면, 오랜 옛날에는 절차적 프로그래밍(procedural programming)이 있었다. 이는 기계에 필요한 기능, 로직을 설계하던 프로그래밍 방식이었고, 쉽게 위에서 아래로 실행 되는 구조를 가지고 있었다. 이전에는 규모가 작았기 때문에 프로그램을 효율적으로 작성하는 방식에 대해서는 대두되지 않았다. 하지만  고 수준의 Enterprise System을 개발하는데에는 무리가 있고, 유지보수의 어려움, 스파게티 코드를 양산하는 프로그래밍 방식이었다.  </p>\n<p> 수 년에 걸쳐 프로그래밍의 패러다임은 객체 지향 프로그래밍 (Object Oriented Programming) 방식을 도입 하였다. 객체지향 프로그래밍 방식은 목표한 기능을 수행하기 위해 기능적, 개념적 단위를 설계하고 이를 class라는 추상화 된 명세를 통해 독립된 기능을 수행하는 프로그래밍 방식이다. 또한 객체들이 유기적으로 협력하여 로직을 수행할 수 있고 유지보수, 확장성이 용이한 프로그래밍 방식이다.</p>\n<p> 하지만 객체지향 프로그래밍 방식에도 헛점은 있었다.<br>실제 핵심 로직을 수행하는 Method에서 아무리 설계를 잘하더라도 분리된 모듈로 작성하기 힘든 부분이 발생한다. <code>횡단 관심사 (CrossCutting Concerns)</code>이라 한다. 횡단 관심사의 예시로는 로깅, 인증, 트랜잭션과 같은 공통적이고 중복되는 내용들이 있다. 이는 중복코드를 발생 시키고 Method의 핵심 로직을 파악하기 어렵게 하고, 코드 가독성을 떨어뜨리며, 유지보수의 난이도를 높이는 요소들이다. 이를 해결 하기 위해 AOP(Aspect Oriented Programming) 이라는 개념이 탄생하였다.</p>\n<h2 id=\"AOP의-개념\"><a href=\"#AOP의-개념\" class=\"headerlink\" title=\"AOP의 개념\"></a>AOP의 개념</h2><p> 실제 핵심 로직(Core Concern)을 수행하면서 발생하는 <code>횡단 관심사 (CrossCutting Concerns)</code> 를 한데 모아 처리하는 것을 AOP라 한다. AOP를 사용하기 위해 Aspect Class를 별도로 지정하여 실행 Method의 조인포인트(Join Point)를 기반으로 포인트 컷(Point Cut)을 설정하여 실제 모듈의 핵심 로직에 관여하지 않고도 횡단 로직을 처리 할 수 있도록 해준다.</p>\n<p><img src=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/cross-cutting-concern.png\" alt=\"횡단관심사와 핵심로직\"></p>\n<p>AOP는 이러한 횡단 관심사 로직을 Method가 실행되는 조인포인트에 코드를 적용 시켜, 실제 메소드에 코드가 있는 것 처럼 실행 하도록 해준다. 이러한 개념을 위빙(Weaving)이라고 한다.</p>\n<p>AOP에서는 이러한 기능을 Aspect라는 이름으로 부르고 있다.<br>Aspect를 정의 하자면,<br>실제 모듈에 대한 핵심기능을 담고 있지는 않지만 모듈이나 Method를 구성하는 한가지 요소이고, 핵심기능에 부가되어 의미를 갖는 모듈을 가르킨다. </p>\n<p>이러한 설명을 보게 되면은 AOP는 OOP를 대체 할 수 있는 획기적인 방법론이라고 생각할 수 있다.<br>AOP는 OOP를 대체 하는 것이 아닌 OOP의 가치를 더 올려 줄 수 있는 보조적이고 상호 보완적인 관계라고 생각 해야 한다.</p>\n<h1 id=\"AOP-에서-사용되는-용어들\"><a href=\"#AOP-에서-사용되는-용어들\" class=\"headerlink\" title=\"AOP 에서 사용되는 용어들\"></a>AOP 에서 사용되는 용어들</h1><h2 id=\"Join-Point\"><a href=\"#Join-Point\" class=\"headerlink\" title=\"Join Point\"></a>Join Point</h2><p>말그대로 Join + Point이다. <code>횡단관심사(Cross Cutting Concern)</code> 로 분리 된 로직이 끼어들 수 있는 (조인할 수 있는) 위치 또는 시점을 일컫는 말이다.</p>\n<h2 id=\"Advice\"><a href=\"#Advice\" class=\"headerlink\" title=\"Advice\"></a>Advice</h2><p><code>횡단관심사(Cross Cutting Concern)</code> 으로 분리 된 로직에 대한 코드<br>Aspect로 분리 되어 실행 시, 위빙되어 구체적인 처리를 하는 로직을 일컫는 단어</p>\n<h2 id=\"Point-Cut\"><a href=\"#Point-Cut\" class=\"headerlink\" title=\"Point Cut\"></a>Point Cut</h2><p>말그대로 (Join) Point + cut이다. Join Point는 모든 메소드에 있는 위치 또는 시점을 일컫는 말이지만,<br>Point cut은 공통으로 적용할 Join Point를 표현식 같은 기능을 사용하여 하나로 묶어내는 역할을 한다. 실제 Advice코드가 적용 될 지점을 의미 하는 단어</p>\n<h2 id=\"Weaving\"><a href=\"#Weaving\" class=\"headerlink\" title=\"Weaving\"></a>Weaving</h2><p>Advice 코드를 핵심 로직의 Point cut에 적용하는 것을 의미하는 단어이다.<br>즉, Advice로 분리한 코드를 핵심 로직에 다시 합치는 일이다.<br>방법에 따라 </p>\n<ul>\n<li>런타임 시, Proxy로 생성하며 코드를 합치는 방법</li>\n<li>컴파일 시, 클래스 로드 시, 바이트 코드를 조작하여 실제 코드를 끼워 넣는 방법<br>이 있다.</li>\n</ul>\n<h2 id=\"Aspect\"><a href=\"#Aspect\" class=\"headerlink\" title=\"Aspect\"></a>Aspect</h2><p>여러 객체에 공통으로 적용되는 관심 사항을 Aspect라고 한다.<br>보안, 트랜잭션, 로깅등이 대표적인 예이다.<br>Aspect는 AOP의 핵심 단위 이며 Advice + Point cut = Aspect 이다.</p>\n<h2 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target\"></a>Target</h2><p>핵심 로직을 구현하는 클래스 또는 객체<br>AOP를 적용하여 Advice를 받을 대상을 의미하는 단어이다.</p>\n<h2 id=\"Advisor\"><a href=\"#Advisor\" class=\"headerlink\" title=\"Advisor\"></a>Advisor</h2><p>Advice 코드와 Pointcut을 합쳐놓은 것을 Advisor라고 부른다.<br>공통 관심사 코드를 뽑아서 하나의 클래스에 담은 것이다.</p>\n<hr>\n<p>참고</p>\n<p><a href=\"https://jongmin92.github.io/2018/02/17/Spring/spring-aop/#aop%EC%9D%98-%EB%93%B1%EC%9E%A5-%EB%B0%B0%EA%B2%BD\" target=\"_blank\" rel=\"noopener\">https://jongmin92.github.io/2018/02/17/Spring/spring-aop/#aop%EC%9D%98-%EB%93%B1%EC%9E%A5-%EB%B0%B0%EA%B2%BD</a></p>\n<p><a href=\"http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220556587811\" target=\"_blank\" rel=\"noopener\">http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220556587811</a></p>\n<p><a href=\"http://www.zdnet.co.kr/news/news_view.asp?artice_id=00000039147106\" target=\"_blank\" rel=\"noopener\">http://www.zdnet.co.kr/news/news_view.asp?artice_id=00000039147106</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>앞선 포스팅에선 간단하게 AOP의 필요성과 간단한 예제 코드를 통해 풀어보는 방법을 적어보았다.</p>\n<p>여기서는 AOP의 개념적인 의미에 대해서 정리해보고 AOP 세상에서 사용되는 용어들에 대한 정리 해보았다.</p>\n<h1 id=\"AOP-Aspect-Oriented-Programming-란\"><a href=\"#AOP-Aspect-Oriented-Programming-란\" class=\"headerlink\" title=\"AOP(Aspect Oriented Programming) 란?\"></a>AOP(Aspect Oriented Programming) 란?</h1><h2 id=\"AOP의-등장배경\"><a href=\"#AOP의-등장배경\" class=\"headerlink\" title=\"AOP의 등장배경\"></a>AOP의 등장배경</h2><p> AOP의 등장배경을 알기 위해 프로그래밍의 패러다임을 살펴보면, 오랜 옛날에는 절차적 프로그래밍(procedural programming)이 있었다. 이는 기계에 필요한 기능, 로직을 설계하던 프로그래밍 방식이었고, 쉽게 위에서 아래로 실행 되는 구조를 가지고 있었다. 이전에는 규모가 작았기 때문에 프로그램을 효율적으로 작성하는 방식에 대해서는 대두되지 않았다. 하지만  고 수준의 Enterprise System을 개발하는데에는 무리가 있고, 유지보수의 어려움, 스파게티 코드를 양산하는 프로그래밍 방식이었다.  </p>\n<p> 수 년에 걸쳐 프로그래밍의 패러다임은 객체 지향 프로그래밍 (Object Oriented Programming) 방식을 도입 하였다. 객체지향 프로그래밍 방식은 목표한 기능을 수행하기 위해 기능적, 개념적 단위를 설계하고 이를 class라는 추상화 된 명세를 통해 독립된 기능을 수행하는 프로그래밍 방식이다. 또한 객체들이 유기적으로 협력하여 로직을 수행할 수 있고 유지보수, 확장성이 용이한 프로그래밍 방식이다.</p>\n<p> 하지만 객체지향 프로그래밍 방식에도 헛점은 있었다.<br>실제 핵심 로직을 수행하는 Method에서 아무리 설계를 잘하더라도 분리된 모듈로 작성하기 힘든 부분이 발생한다. <code>횡단 관심사 (CrossCutting Concerns)</code>이라 한다. 횡단 관심사의 예시로는 로깅, 인증, 트랜잭션과 같은 공통적이고 중복되는 내용들이 있다. 이는 중복코드를 발생 시키고 Method의 핵심 로직을 파악하기 어렵게 하고, 코드 가독성을 떨어뜨리며, 유지보수의 난이도를 높이는 요소들이다. 이를 해결 하기 위해 AOP(Aspect Oriented Programming) 이라는 개념이 탄생하였다.</p>\n<h2 id=\"AOP의-개념\"><a href=\"#AOP의-개념\" class=\"headerlink\" title=\"AOP의 개념\"></a>AOP의 개념</h2><p> 실제 핵심 로직(Core Concern)을 수행하면서 발생하는 <code>횡단 관심사 (CrossCutting Concerns)</code> 를 한데 모아 처리하는 것을 AOP라 한다. AOP를 사용하기 위해 Aspect Class를 별도로 지정하여 실행 Method의 조인포인트(Join Point)를 기반으로 포인트 컷(Point Cut)을 설정하여 실제 모듈의 핵심 로직에 관여하지 않고도 횡단 로직을 처리 할 수 있도록 해준다.</p>\n<p><img src=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/cross-cutting-concern.png\" alt=\"횡단관심사와 핵심로직\"></p>\n<p>AOP는 이러한 횡단 관심사 로직을 Method가 실행되는 조인포인트에 코드를 적용 시켜, 실제 메소드에 코드가 있는 것 처럼 실행 하도록 해준다. 이러한 개념을 위빙(Weaving)이라고 한다.</p>\n<p>AOP에서는 이러한 기능을 Aspect라는 이름으로 부르고 있다.<br>Aspect를 정의 하자면,<br>실제 모듈에 대한 핵심기능을 담고 있지는 않지만 모듈이나 Method를 구성하는 한가지 요소이고, 핵심기능에 부가되어 의미를 갖는 모듈을 가르킨다. </p>\n<p>이러한 설명을 보게 되면은 AOP는 OOP를 대체 할 수 있는 획기적인 방법론이라고 생각할 수 있다.<br>AOP는 OOP를 대체 하는 것이 아닌 OOP의 가치를 더 올려 줄 수 있는 보조적이고 상호 보완적인 관계라고 생각 해야 한다.</p>\n<h1 id=\"AOP-에서-사용되는-용어들\"><a href=\"#AOP-에서-사용되는-용어들\" class=\"headerlink\" title=\"AOP 에서 사용되는 용어들\"></a>AOP 에서 사용되는 용어들</h1><h2 id=\"Join-Point\"><a href=\"#Join-Point\" class=\"headerlink\" title=\"Join Point\"></a>Join Point</h2><p>말그대로 Join + Point이다. <code>횡단관심사(Cross Cutting Concern)</code> 로 분리 된 로직이 끼어들 수 있는 (조인할 수 있는) 위치 또는 시점을 일컫는 말이다.</p>\n<h2 id=\"Advice\"><a href=\"#Advice\" class=\"headerlink\" title=\"Advice\"></a>Advice</h2><p><code>횡단관심사(Cross Cutting Concern)</code> 으로 분리 된 로직에 대한 코드<br>Aspect로 분리 되어 실행 시, 위빙되어 구체적인 처리를 하는 로직을 일컫는 단어</p>\n<h2 id=\"Point-Cut\"><a href=\"#Point-Cut\" class=\"headerlink\" title=\"Point Cut\"></a>Point Cut</h2><p>말그대로 (Join) Point + cut이다. Join Point는 모든 메소드에 있는 위치 또는 시점을 일컫는 말이지만,<br>Point cut은 공통으로 적용할 Join Point를 표현식 같은 기능을 사용하여 하나로 묶어내는 역할을 한다. 실제 Advice코드가 적용 될 지점을 의미 하는 단어</p>\n<h2 id=\"Weaving\"><a href=\"#Weaving\" class=\"headerlink\" title=\"Weaving\"></a>Weaving</h2><p>Advice 코드를 핵심 로직의 Point cut에 적용하는 것을 의미하는 단어이다.<br>즉, Advice로 분리한 코드를 핵심 로직에 다시 합치는 일이다.<br>방법에 따라 </p>\n<ul>\n<li>런타임 시, Proxy로 생성하며 코드를 합치는 방법</li>\n<li>컴파일 시, 클래스 로드 시, 바이트 코드를 조작하여 실제 코드를 끼워 넣는 방법<br>이 있다.</li>\n</ul>\n<h2 id=\"Aspect\"><a href=\"#Aspect\" class=\"headerlink\" title=\"Aspect\"></a>Aspect</h2><p>여러 객체에 공통으로 적용되는 관심 사항을 Aspect라고 한다.<br>보안, 트랜잭션, 로깅등이 대표적인 예이다.<br>Aspect는 AOP의 핵심 단위 이며 Advice + Point cut = Aspect 이다.</p>\n<h2 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target\"></a>Target</h2><p>핵심 로직을 구현하는 클래스 또는 객체<br>AOP를 적용하여 Advice를 받을 대상을 의미하는 단어이다.</p>\n<h2 id=\"Advisor\"><a href=\"#Advisor\" class=\"headerlink\" title=\"Advisor\"></a>Advisor</h2><p>Advice 코드와 Pointcut을 합쳐놓은 것을 Advisor라고 부른다.<br>공통 관심사 코드를 뽑아서 하나의 클래스에 담은 것이다.</p>\n<hr>\n<p>참고</p>\n<p><a href=\"https://jongmin92.github.io/2018/02/17/Spring/spring-aop/#aop%EC%9D%98-%EB%93%B1%EC%9E%A5-%EB%B0%B0%EA%B2%BD\" target=\"_blank\" rel=\"noopener\">https://jongmin92.github.io/2018/02/17/Spring/spring-aop/#aop%EC%9D%98-%EB%93%B1%EC%9E%A5-%EB%B0%B0%EA%B2%BD</a></p>\n<p><a href=\"http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220556587811\" target=\"_blank\" rel=\"noopener\">http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220556587811</a></p>\n<p><a href=\"http://www.zdnet.co.kr/news/news_view.asp?artice_id=00000039147106\" target=\"_blank\" rel=\"noopener\">http://www.zdnet.co.kr/news/news_view.asp?artice_id=00000039147106</a></p>\n"},{"layout":"post","title":"Spring AOP (3)","subtitle":"3. Spring AOP","date":"2018-07-21T03:52:33.000Z","background":"/img/posts/06.jpg","_content":"\n앞서 AOP에대한 간단한 예시와 개념을 살펴보았다.\n\n이번 포스트에서는 Spring에서 제공하는 AOP 기능과 작동방식에 대해서 알아보도록 하겠다.\n\n\n\n# Spring AOP\n\nAOP란 `횡단 관심사 (Cross Cutting Concern)` 을 한데 모아 로직을 설계한다음\n런타임(Runtime) 시, 클래스 로드 (Load Time) 시, 컴파일(Compile Time) 시, 횡단 로직을 핵심 로직에 적용하여 작동하게 해준다. \n\n이 중에서 Spring AOP는 Proxy를 이용하여 런타임 위빙(Runtime Weaving)을 이용하여 횡단 로직을 수행 할 수 있도록 한다.   Spring AOP에서 사용되는 Proxy는 2가지가 있다.\n한가지는 JDK 1.3 부터 적용되기 시작한 JDK Dynamic Proxy가 있다. 이는 Java 라이브러리에서 제공하는 Proxy이다.\n또 다른 한가지는 CGLIB Proxy가 있다. CGLIB를 사용하기 위해서는 개발하는 프로젝트에 CGLIB 라이브러리를 추가해야 사용이 가능하다.\n\n\n\n# Proxy란?\n\n![Proxy구성도](https://camo.githubusercontent.com/d799bd0ae9b0df6a67b6d2c69a29f1a8eba1d8d2/687474703a2f2f6366696c6532362e75662e746973746f72792e636f6d2f696d6167652f32343237303333373531344630464635313445334336)\n\n\n\n> Proxy란 마치 자신이 클라이언트가 사용하려고 하는 실제 대상인 것처럼 위장해서 클라이언트의 요청을 받아주는 것을 대리자, 대리인과 같은 역할을 하는 객체의 의미한다.\n>\n> 그리고 프록시를 통해 최종적으로 요청을 위임받아 처리하는 실제 오브젝트를 타깃(Target) 또는 실체(Real Object) 라고 부른다.\n>\n> 토비의 스프링 vol.1 (p. 430)\n\n\n\n토비의 스프링 책에서는 Proxy에 대한 정의를 위와 같이 하고 있다. 실제 Target이 담당하는 역할을 요청을 대리 받아서 요청 이전, 이후에 대한 추가적인 로직을 추가 할 수 있는 객체이다. 이렇게 하면 실제 Target이 담당하는 역할에 대해서는 관여 하지 않으면서 추가적인 역할을 추가 할 수 있기 때문이다. \n\nSpring에서는 Proxy를 이용해 객체지향의 5대원칙 중 하나인 OCP(Open-Close Principal : 개방폐쇄의 원칙)을 적용하고 있다.\n\n\n\n> OCP (Open-Close Principal : 개방 폐쇄의 원칙)\n>\n> **개방-폐쇄 원칙**(OCP, Open-Closed Principle)은 '소프트웨어 개체(클래스, 모듈, 함수 등등)는 확장에 대해 열려 있어야 하고, 수정에 대해서는 닫혀 있어야 한다.'는 프로그래밍 원칙이다.  \n\n실제 Target에 대한 수정을 하지 않으면서, Proxy를 통해 추가적인 코드를 작성 하여 기능을 확장 시킬 수 있음을 의미한다.\n\n\n\n# Proxy vs Proxy Pattern\n\n일반적으로 사용하는 하는 Proxy라는 용어와 디자인패턴에서 말하는 프록시 패턴(Proxy Pattern)은 구분할 필요가 있다.\n비슷한 개념이지만, 내용이 조금 다르다.\n\n일반적으로 부르는 Proxy는 실제 Target의 기능을 수행하면서 기능을 확장하거나 추가 하는 실제 객체(Object)를 의미한다.\n\nProxy Pattern은 실제로 Target에 대한 기능을 확장하거나, 추가하지 않는다. 그저 클라이언트가 타깃에 접근하는 방식을 변경해 주는 역할을 한다.\n\n\n\n# JDK Dynamic Proxy\n\n![JDK Dynamic Proxy](https://images.techhive.com/images/idge/imported/article/jvw/2000/11/jw-1110-proxy-100157716-orig.gif)\n\n\n\nJDK Dynamic Proxy는 JDK 1.3+ 부터 제공되는 Proxy Factory에 의해 런타임 시 동적으로 만들어 지는 오브젝트이다.\nJDK Dynamic Proxy는 반드시 Interface가 정의 되어있고, Interface에 대한 명세를 기준으로 Proxy를 생성한다. \n따라서 Interface 선언에 대한 강제성이 있다는 단점이 있다.\n이전에는 직접 수동으로 Proxy 객체를 만들어서 사용하는 경우도 있었으나, 요즘은 자동 프록시 생성기라는 모듈을 이용하여 Dynamic Proxy를 생성한다. \n\n내부적으로 Dynamic Proxy에서는 InvocationHandler라는 Interface를 구현하여 만들어지는데 InvocationHandler의 invoke라는 함수를 Override하여 Proxy의 위임 기능을 수행한다. 이 과정에서 Object에 대해 Reflection기능을 사용하여 기능을 구현하기 때문에 퍼포먼스의 하락의 원인이 되기도 한다.\n\n~~~java\npublic class ExamDynamicHandler implements InvocationHandler {\n    private ExamInterface target; // 타깃 객체에 대한 클래스를 직접 참조하는것이 아닌 Interface를 이용\n     \n    public ExamDynamicHandler(ExamInterface target) {\n        this.target = target;\n    }\n \n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args)\n            throws Throwable {\n        // TODO Auto-generated method stub\n        // 메소드에 대한 명세, 파라미터등을 가져오는 과정에서 Reflection 사용\n        String ret = (String)method.invoke(target, args); //타입 Safe하지 않는 단점이 있다.\n        return ret.toUpperCase(); //메소드 기능에 대한 확장\n    }\n}\n~~~\n\n\n\n# CGLIB Proxy\n\nCGLIB Proxy는 순수 Java JDK 라이브러리를 이용하는 것이 아닌 CGLIB라는 외부 라이브러리를 추가해야만 사용할 수 있다. \n실제 CGLIB의 Enhancer라는 클래스를 바탕으로 Proxy를 생성하며, JDK Dynamic Proxy의 단점인 Interface가 없어도 Proxy를 생성 할 수 있다. CGLIB Proxy는 Target Class를 상속받아 생성된다. 그렇기 때문에 개발자는 Proxy를 생성 하기 위해 굳이 Interface를 만들어야 하는 수고를 덜 수 있다.\n\n하지만, 상속을 이용하는 만큼 final이나 private과 같이 상속에 대해 Override를 지원하지 않는 경우 Proxy에서 해당 메소드에 대한 Aspect를 적용할 수 없다는 단점이 있다. \n\nCGLIB Proxy의 경우 실제 바이트 코드를 조작하여 JDK Dynamic Proxy보다는 퍼포먼스가 상대적으로 빠른 장점이 있다.\n\n![CGLIB Proxy](http://www.baeldung.com/wp-content/uploads/2017/10/springaop-process.png)\n\n\n\n* CGLIB Proxy 설정법\n\n* ~~~yaml\n  spring.aop.proxy-target-class=false\n  ~~~\n\n  ~~~xml\n  <aop:config proxy-target-class=\"true\">\n  </aop:config>\n  <aop:aspectj-autoproxy proxy-target-class=\"true\"/> <!-- AspectJ를 사용하는 경우 -->\n  ~~~\n\n  ~~~java\n  //AOP를 사용하는 경우 Interface가 있더라도 cglib사용(target class기반)을 강제한다\n  @EnableAsync(proxyTargetClass = true)\n  @EnableCaching(proxyTargetClass = true) \n  ~~~\n\n\n\n# Spring Bean에 대한 Proxy는?\n\nSpring에서 Bean으로 등록된 객체는 싱글톤으로 등록되어 IoC 컨테이너에서 관리 된다.\n하지만 Bean 객체에 대해 Spring AOP를 적용하는 경우 Proxy가 생성 될 텐데.. 이 경우 이 Bean을 DI하여 사용하는 곳에서는 어떻게 Proxy를 주입하여 사용할까?\n\n![00.png](https://dhsim86.github.io/static/assets/img/blog/web/2017-09-11-toby_spring_06_aop_2/00.png)\n\n\n\nSpring에서는 `자동 프록시 생성기` 라는 것이 있다.\n\n빈 후처리기들 중에서 자동으로 프록시를 생성하기 위해  `DefaultAdvisorAutoProxyCreator` 라는 클래스를 사용한다. \n이 클래스는 어드바이저를 이용한 `자동 프록시 생성기` 이다. 빈 오브젝트의 일부를 프록시로 포장하고, 프록시를 빈으로 대신 등록시킬 수 있다.\n\nDefaultAdvisorAutoProxyCreator 빈 후처리가 등록되어 있다면, 스프링은 빈 오브젝트를 만들 때마다 후처리기에게 빈을 보낸다.\n\n1. 후처리기는 `빈으로 등록된 모든 어드바이저 내의 포인트컷을 이용해` 전달받은 빈이 프록시 적용 대상인지 확인한다.\n2. 프록시 적용 대상이면 내장된 프록시 생성기를 통해 현재 빈에 대한 `프록시를 생성하고 어드바이저를 연결한다.`\n3. 프록시가 생성되면 전달받은 Target Bean 오브젝트 대신에 Proxy 오브젝트를 스프링 컨테이너에게 돌려준다.\n4. 컨테이너는 빈 후처리가 돌려준 Proxy 오브젝트를 빈으로 등록한다.\n\n이 후처리기를 통해 일일이 ProxyFactoryBean을 빈으로 등록하지 않아도 여러 타깃 오브젝트에 자동으로 프록시를 적용시킬 수 있다.\n\n \n\n# 요약..\n\n* Spring AOP는 무조건 Proxy 기반의 RTW(Run Time Weaving)을 적용한 AOP방식이다.\n* Spring AOP에서 사용하는 Proxy는 JDK Dynamic Proxy와 CGLIB Proxy를 사용한다.\n  * JDK Dynamic Proxy는 Interface 기반으로 생성 된다. (반드시 Interface가 있어야지만 생성가능하다)\n  * CGLIB Proxy는 Class에 대한 Proxy생성을 지원한다 (상속을 이용)\n    따라서 final이나 private Method에 대한 AOP 불가 (상속 된 Proxy 객체 생성 시, Override가 불가하기 때문)\n* Spring AOP에서는 Method에 대해서만 JoinPoint를 지원한다.\n  (그 이상의 Join Point를 이용하기 위해서는 AspectJ와 같은 모듈을 이용해야 한다.)\n\n\n\n# 참고\n\n토비의 스프링 vol.1\n\nhttp://blog.naver.com/PostView.nhn?blogId=tmondev&logNo=220556587811\n\nhttps://ko.wikipedia.org/wiki/%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84_%EC%9B%90%EC%B9%99","source":"_posts/2018-07-21-spring-aop3.md","raw":"---\nlayout: post\ntitle:  \"Spring AOP (3)\"\nsubtitle: \"3. Spring AOP\"\ndate:   2018-07-21 12:52:33 +0900\nbackground: '/img/posts/06.jpg'\n---\n\n앞서 AOP에대한 간단한 예시와 개념을 살펴보았다.\n\n이번 포스트에서는 Spring에서 제공하는 AOP 기능과 작동방식에 대해서 알아보도록 하겠다.\n\n\n\n# Spring AOP\n\nAOP란 `횡단 관심사 (Cross Cutting Concern)` 을 한데 모아 로직을 설계한다음\n런타임(Runtime) 시, 클래스 로드 (Load Time) 시, 컴파일(Compile Time) 시, 횡단 로직을 핵심 로직에 적용하여 작동하게 해준다. \n\n이 중에서 Spring AOP는 Proxy를 이용하여 런타임 위빙(Runtime Weaving)을 이용하여 횡단 로직을 수행 할 수 있도록 한다.   Spring AOP에서 사용되는 Proxy는 2가지가 있다.\n한가지는 JDK 1.3 부터 적용되기 시작한 JDK Dynamic Proxy가 있다. 이는 Java 라이브러리에서 제공하는 Proxy이다.\n또 다른 한가지는 CGLIB Proxy가 있다. CGLIB를 사용하기 위해서는 개발하는 프로젝트에 CGLIB 라이브러리를 추가해야 사용이 가능하다.\n\n\n\n# Proxy란?\n\n![Proxy구성도](https://camo.githubusercontent.com/d799bd0ae9b0df6a67b6d2c69a29f1a8eba1d8d2/687474703a2f2f6366696c6532362e75662e746973746f72792e636f6d2f696d6167652f32343237303333373531344630464635313445334336)\n\n\n\n> Proxy란 마치 자신이 클라이언트가 사용하려고 하는 실제 대상인 것처럼 위장해서 클라이언트의 요청을 받아주는 것을 대리자, 대리인과 같은 역할을 하는 객체의 의미한다.\n>\n> 그리고 프록시를 통해 최종적으로 요청을 위임받아 처리하는 실제 오브젝트를 타깃(Target) 또는 실체(Real Object) 라고 부른다.\n>\n> 토비의 스프링 vol.1 (p. 430)\n\n\n\n토비의 스프링 책에서는 Proxy에 대한 정의를 위와 같이 하고 있다. 실제 Target이 담당하는 역할을 요청을 대리 받아서 요청 이전, 이후에 대한 추가적인 로직을 추가 할 수 있는 객체이다. 이렇게 하면 실제 Target이 담당하는 역할에 대해서는 관여 하지 않으면서 추가적인 역할을 추가 할 수 있기 때문이다. \n\nSpring에서는 Proxy를 이용해 객체지향의 5대원칙 중 하나인 OCP(Open-Close Principal : 개방폐쇄의 원칙)을 적용하고 있다.\n\n\n\n> OCP (Open-Close Principal : 개방 폐쇄의 원칙)\n>\n> **개방-폐쇄 원칙**(OCP, Open-Closed Principle)은 '소프트웨어 개체(클래스, 모듈, 함수 등등)는 확장에 대해 열려 있어야 하고, 수정에 대해서는 닫혀 있어야 한다.'는 프로그래밍 원칙이다.  \n\n실제 Target에 대한 수정을 하지 않으면서, Proxy를 통해 추가적인 코드를 작성 하여 기능을 확장 시킬 수 있음을 의미한다.\n\n\n\n# Proxy vs Proxy Pattern\n\n일반적으로 사용하는 하는 Proxy라는 용어와 디자인패턴에서 말하는 프록시 패턴(Proxy Pattern)은 구분할 필요가 있다.\n비슷한 개념이지만, 내용이 조금 다르다.\n\n일반적으로 부르는 Proxy는 실제 Target의 기능을 수행하면서 기능을 확장하거나 추가 하는 실제 객체(Object)를 의미한다.\n\nProxy Pattern은 실제로 Target에 대한 기능을 확장하거나, 추가하지 않는다. 그저 클라이언트가 타깃에 접근하는 방식을 변경해 주는 역할을 한다.\n\n\n\n# JDK Dynamic Proxy\n\n![JDK Dynamic Proxy](https://images.techhive.com/images/idge/imported/article/jvw/2000/11/jw-1110-proxy-100157716-orig.gif)\n\n\n\nJDK Dynamic Proxy는 JDK 1.3+ 부터 제공되는 Proxy Factory에 의해 런타임 시 동적으로 만들어 지는 오브젝트이다.\nJDK Dynamic Proxy는 반드시 Interface가 정의 되어있고, Interface에 대한 명세를 기준으로 Proxy를 생성한다. \n따라서 Interface 선언에 대한 강제성이 있다는 단점이 있다.\n이전에는 직접 수동으로 Proxy 객체를 만들어서 사용하는 경우도 있었으나, 요즘은 자동 프록시 생성기라는 모듈을 이용하여 Dynamic Proxy를 생성한다. \n\n내부적으로 Dynamic Proxy에서는 InvocationHandler라는 Interface를 구현하여 만들어지는데 InvocationHandler의 invoke라는 함수를 Override하여 Proxy의 위임 기능을 수행한다. 이 과정에서 Object에 대해 Reflection기능을 사용하여 기능을 구현하기 때문에 퍼포먼스의 하락의 원인이 되기도 한다.\n\n~~~java\npublic class ExamDynamicHandler implements InvocationHandler {\n    private ExamInterface target; // 타깃 객체에 대한 클래스를 직접 참조하는것이 아닌 Interface를 이용\n     \n    public ExamDynamicHandler(ExamInterface target) {\n        this.target = target;\n    }\n \n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args)\n            throws Throwable {\n        // TODO Auto-generated method stub\n        // 메소드에 대한 명세, 파라미터등을 가져오는 과정에서 Reflection 사용\n        String ret = (String)method.invoke(target, args); //타입 Safe하지 않는 단점이 있다.\n        return ret.toUpperCase(); //메소드 기능에 대한 확장\n    }\n}\n~~~\n\n\n\n# CGLIB Proxy\n\nCGLIB Proxy는 순수 Java JDK 라이브러리를 이용하는 것이 아닌 CGLIB라는 외부 라이브러리를 추가해야만 사용할 수 있다. \n실제 CGLIB의 Enhancer라는 클래스를 바탕으로 Proxy를 생성하며, JDK Dynamic Proxy의 단점인 Interface가 없어도 Proxy를 생성 할 수 있다. CGLIB Proxy는 Target Class를 상속받아 생성된다. 그렇기 때문에 개발자는 Proxy를 생성 하기 위해 굳이 Interface를 만들어야 하는 수고를 덜 수 있다.\n\n하지만, 상속을 이용하는 만큼 final이나 private과 같이 상속에 대해 Override를 지원하지 않는 경우 Proxy에서 해당 메소드에 대한 Aspect를 적용할 수 없다는 단점이 있다. \n\nCGLIB Proxy의 경우 실제 바이트 코드를 조작하여 JDK Dynamic Proxy보다는 퍼포먼스가 상대적으로 빠른 장점이 있다.\n\n![CGLIB Proxy](http://www.baeldung.com/wp-content/uploads/2017/10/springaop-process.png)\n\n\n\n* CGLIB Proxy 설정법\n\n* ~~~yaml\n  spring.aop.proxy-target-class=false\n  ~~~\n\n  ~~~xml\n  <aop:config proxy-target-class=\"true\">\n  </aop:config>\n  <aop:aspectj-autoproxy proxy-target-class=\"true\"/> <!-- AspectJ를 사용하는 경우 -->\n  ~~~\n\n  ~~~java\n  //AOP를 사용하는 경우 Interface가 있더라도 cglib사용(target class기반)을 강제한다\n  @EnableAsync(proxyTargetClass = true)\n  @EnableCaching(proxyTargetClass = true) \n  ~~~\n\n\n\n# Spring Bean에 대한 Proxy는?\n\nSpring에서 Bean으로 등록된 객체는 싱글톤으로 등록되어 IoC 컨테이너에서 관리 된다.\n하지만 Bean 객체에 대해 Spring AOP를 적용하는 경우 Proxy가 생성 될 텐데.. 이 경우 이 Bean을 DI하여 사용하는 곳에서는 어떻게 Proxy를 주입하여 사용할까?\n\n![00.png](https://dhsim86.github.io/static/assets/img/blog/web/2017-09-11-toby_spring_06_aop_2/00.png)\n\n\n\nSpring에서는 `자동 프록시 생성기` 라는 것이 있다.\n\n빈 후처리기들 중에서 자동으로 프록시를 생성하기 위해  `DefaultAdvisorAutoProxyCreator` 라는 클래스를 사용한다. \n이 클래스는 어드바이저를 이용한 `자동 프록시 생성기` 이다. 빈 오브젝트의 일부를 프록시로 포장하고, 프록시를 빈으로 대신 등록시킬 수 있다.\n\nDefaultAdvisorAutoProxyCreator 빈 후처리가 등록되어 있다면, 스프링은 빈 오브젝트를 만들 때마다 후처리기에게 빈을 보낸다.\n\n1. 후처리기는 `빈으로 등록된 모든 어드바이저 내의 포인트컷을 이용해` 전달받은 빈이 프록시 적용 대상인지 확인한다.\n2. 프록시 적용 대상이면 내장된 프록시 생성기를 통해 현재 빈에 대한 `프록시를 생성하고 어드바이저를 연결한다.`\n3. 프록시가 생성되면 전달받은 Target Bean 오브젝트 대신에 Proxy 오브젝트를 스프링 컨테이너에게 돌려준다.\n4. 컨테이너는 빈 후처리가 돌려준 Proxy 오브젝트를 빈으로 등록한다.\n\n이 후처리기를 통해 일일이 ProxyFactoryBean을 빈으로 등록하지 않아도 여러 타깃 오브젝트에 자동으로 프록시를 적용시킬 수 있다.\n\n \n\n# 요약..\n\n* Spring AOP는 무조건 Proxy 기반의 RTW(Run Time Weaving)을 적용한 AOP방식이다.\n* Spring AOP에서 사용하는 Proxy는 JDK Dynamic Proxy와 CGLIB Proxy를 사용한다.\n  * JDK Dynamic Proxy는 Interface 기반으로 생성 된다. (반드시 Interface가 있어야지만 생성가능하다)\n  * CGLIB Proxy는 Class에 대한 Proxy생성을 지원한다 (상속을 이용)\n    따라서 final이나 private Method에 대한 AOP 불가 (상속 된 Proxy 객체 생성 시, Override가 불가하기 때문)\n* Spring AOP에서는 Method에 대해서만 JoinPoint를 지원한다.\n  (그 이상의 Join Point를 이용하기 위해서는 AspectJ와 같은 모듈을 이용해야 한다.)\n\n\n\n# 참고\n\n토비의 스프링 vol.1\n\nhttp://blog.naver.com/PostView.nhn?blogId=tmondev&logNo=220556587811\n\nhttps://ko.wikipedia.org/wiki/%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84_%EC%9B%90%EC%B9%99","slug":"2018-07-21-spring-aop3","published":1,"updated":"2018-07-24T15:54:43.604Z","comments":1,"photos":[],"link":"","_id":"cjkic64ot0002vcyah7q4nbtg","content":"<p>앞서 AOP에대한 간단한 예시와 개념을 살펴보았다.</p>\n<p>이번 포스트에서는 Spring에서 제공하는 AOP 기능과 작동방식에 대해서 알아보도록 하겠다.</p>\n<h1 id=\"Spring-AOP\"><a href=\"#Spring-AOP\" class=\"headerlink\" title=\"Spring AOP\"></a>Spring AOP</h1><p>AOP란 <code>횡단 관심사 (Cross Cutting Concern)</code> 을 한데 모아 로직을 설계한다음<br>런타임(Runtime) 시, 클래스 로드 (Load Time) 시, 컴파일(Compile Time) 시, 횡단 로직을 핵심 로직에 적용하여 작동하게 해준다. </p>\n<p>이 중에서 Spring AOP는 Proxy를 이용하여 런타임 위빙(Runtime Weaving)을 이용하여 횡단 로직을 수행 할 수 있도록 한다.   Spring AOP에서 사용되는 Proxy는 2가지가 있다.<br>한가지는 JDK 1.3 부터 적용되기 시작한 JDK Dynamic Proxy가 있다. 이는 Java 라이브러리에서 제공하는 Proxy이다.<br>또 다른 한가지는 CGLIB Proxy가 있다. CGLIB를 사용하기 위해서는 개발하는 프로젝트에 CGLIB 라이브러리를 추가해야 사용이 가능하다.</p>\n<h1 id=\"Proxy란\"><a href=\"#Proxy란\" class=\"headerlink\" title=\"Proxy란?\"></a>Proxy란?</h1><p><img src=\"https://camo.githubusercontent.com/d799bd0ae9b0df6a67b6d2c69a29f1a8eba1d8d2/687474703a2f2f6366696c6532362e75662e746973746f72792e636f6d2f696d6167652f32343237303333373531344630464635313445334336\" alt=\"Proxy구성도\"></p>\n<blockquote>\n<p>Proxy란 마치 자신이 클라이언트가 사용하려고 하는 실제 대상인 것처럼 위장해서 클라이언트의 요청을 받아주는 것을 대리자, 대리인과 같은 역할을 하는 객체의 의미한다.</p>\n<p>그리고 프록시를 통해 최종적으로 요청을 위임받아 처리하는 실제 오브젝트를 타깃(Target) 또는 실체(Real Object) 라고 부른다.</p>\n<p>토비의 스프링 vol.1 (p. 430)</p>\n</blockquote>\n<p>토비의 스프링 책에서는 Proxy에 대한 정의를 위와 같이 하고 있다. 실제 Target이 담당하는 역할을 요청을 대리 받아서 요청 이전, 이후에 대한 추가적인 로직을 추가 할 수 있는 객체이다. 이렇게 하면 실제 Target이 담당하는 역할에 대해서는 관여 하지 않으면서 추가적인 역할을 추가 할 수 있기 때문이다. </p>\n<p>Spring에서는 Proxy를 이용해 객체지향의 5대원칙 중 하나인 OCP(Open-Close Principal : 개방폐쇄의 원칙)을 적용하고 있다.</p>\n<blockquote>\n<p>OCP (Open-Close Principal : 개방 폐쇄의 원칙)</p>\n<p><strong>개방-폐쇄 원칙</strong>(OCP, Open-Closed Principle)은 ‘소프트웨어 개체(클래스, 모듈, 함수 등등)는 확장에 대해 열려 있어야 하고, 수정에 대해서는 닫혀 있어야 한다.’는 프로그래밍 원칙이다.  </p>\n</blockquote>\n<p>실제 Target에 대한 수정을 하지 않으면서, Proxy를 통해 추가적인 코드를 작성 하여 기능을 확장 시킬 수 있음을 의미한다.</p>\n<h1 id=\"Proxy-vs-Proxy-Pattern\"><a href=\"#Proxy-vs-Proxy-Pattern\" class=\"headerlink\" title=\"Proxy vs Proxy Pattern\"></a>Proxy vs Proxy Pattern</h1><p>일반적으로 사용하는 하는 Proxy라는 용어와 디자인패턴에서 말하는 프록시 패턴(Proxy Pattern)은 구분할 필요가 있다.<br>비슷한 개념이지만, 내용이 조금 다르다.</p>\n<p>일반적으로 부르는 Proxy는 실제 Target의 기능을 수행하면서 기능을 확장하거나 추가 하는 실제 객체(Object)를 의미한다.</p>\n<p>Proxy Pattern은 실제로 Target에 대한 기능을 확장하거나, 추가하지 않는다. 그저 클라이언트가 타깃에 접근하는 방식을 변경해 주는 역할을 한다.</p>\n<h1 id=\"JDK-Dynamic-Proxy\"><a href=\"#JDK-Dynamic-Proxy\" class=\"headerlink\" title=\"JDK Dynamic Proxy\"></a>JDK Dynamic Proxy</h1><p><img src=\"https://images.techhive.com/images/idge/imported/article/jvw/2000/11/jw-1110-proxy-100157716-orig.gif\" alt=\"JDK Dynamic Proxy\"></p>\n<p>JDK Dynamic Proxy는 JDK 1.3+ 부터 제공되는 Proxy Factory에 의해 런타임 시 동적으로 만들어 지는 오브젝트이다.<br>JDK Dynamic Proxy는 반드시 Interface가 정의 되어있고, Interface에 대한 명세를 기준으로 Proxy를 생성한다.<br>따라서 Interface 선언에 대한 강제성이 있다는 단점이 있다.<br>이전에는 직접 수동으로 Proxy 객체를 만들어서 사용하는 경우도 있었으나, 요즘은 자동 프록시 생성기라는 모듈을 이용하여 Dynamic Proxy를 생성한다. </p>\n<p>내부적으로 Dynamic Proxy에서는 InvocationHandler라는 Interface를 구현하여 만들어지는데 InvocationHandler의 invoke라는 함수를 Override하여 Proxy의 위임 기능을 수행한다. 이 과정에서 Object에 대해 Reflection기능을 사용하여 기능을 구현하기 때문에 퍼포먼스의 하락의 원인이 되기도 한다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExamDynamicHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ExamInterface target; <span class=\"comment\">// 타깃 객체에 대한 클래스를 직접 참조하는것이 아닌 Interface를 이용</span></span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExamDynamicHandler</span><span class=\"params\">(ExamInterface target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        <span class=\"comment\">// 메소드에 대한 명세, 파라미터등을 가져오는 과정에서 Reflection 사용</span></span><br><span class=\"line\">        String ret = (String)method.invoke(target, args); <span class=\"comment\">//타입 Safe하지 않는 단점이 있다.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret.toUpperCase(); <span class=\"comment\">//메소드 기능에 대한 확장</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"CGLIB-Proxy\"><a href=\"#CGLIB-Proxy\" class=\"headerlink\" title=\"CGLIB Proxy\"></a>CGLIB Proxy</h1><p>CGLIB Proxy는 순수 Java JDK 라이브러리를 이용하는 것이 아닌 CGLIB라는 외부 라이브러리를 추가해야만 사용할 수 있다.<br>실제 CGLIB의 Enhancer라는 클래스를 바탕으로 Proxy를 생성하며, JDK Dynamic Proxy의 단점인 Interface가 없어도 Proxy를 생성 할 수 있다. CGLIB Proxy는 Target Class를 상속받아 생성된다. 그렇기 때문에 개발자는 Proxy를 생성 하기 위해 굳이 Interface를 만들어야 하는 수고를 덜 수 있다.</p>\n<p>하지만, 상속을 이용하는 만큼 final이나 private과 같이 상속에 대해 Override를 지원하지 않는 경우 Proxy에서 해당 메소드에 대한 Aspect를 적용할 수 없다는 단점이 있다. </p>\n<p>CGLIB Proxy의 경우 실제 바이트 코드를 조작하여 JDK Dynamic Proxy보다는 퍼포먼스가 상대적으로 빠른 장점이 있다.</p>\n<p><img src=\"http://www.baeldung.com/wp-content/uploads/2017/10/springaop-process.png\" alt=\"CGLIB Proxy\"></p>\n<ul>\n<li><p>CGLIB Proxy 설정법</p>\n</li>\n<li><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">spring.aop.proxy-target-class=false</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"true\"</span>/&gt;</span> <span class=\"comment\">&lt;!-- AspectJ를 사용하는 경우 --&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//AOP를 사용하는 경우 Interface가 있더라도 cglib사용(target class기반)을 강제한다</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAsync</span>(proxyTargetClass = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableCaching</span>(proxyTargetClass = <span class=\"keyword\">true</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Spring-Bean에-대한-Proxy는\"><a href=\"#Spring-Bean에-대한-Proxy는\" class=\"headerlink\" title=\"Spring Bean에 대한 Proxy는?\"></a>Spring Bean에 대한 Proxy는?</h1><p>Spring에서 Bean으로 등록된 객체는 싱글톤으로 등록되어 IoC 컨테이너에서 관리 된다.<br>하지만 Bean 객체에 대해 Spring AOP를 적용하는 경우 Proxy가 생성 될 텐데.. 이 경우 이 Bean을 DI하여 사용하는 곳에서는 어떻게 Proxy를 주입하여 사용할까?</p>\n<p><img src=\"https://dhsim86.github.io/static/assets/img/blog/web/2017-09-11-toby_spring_06_aop_2/00.png\" alt=\"00.png\"></p>\n<p>Spring에서는 <code>자동 프록시 생성기</code> 라는 것이 있다.</p>\n<p>빈 후처리기들 중에서 자동으로 프록시를 생성하기 위해  <code>DefaultAdvisorAutoProxyCreator</code> 라는 클래스를 사용한다.<br>이 클래스는 어드바이저를 이용한 <code>자동 프록시 생성기</code> 이다. 빈 오브젝트의 일부를 프록시로 포장하고, 프록시를 빈으로 대신 등록시킬 수 있다.</p>\n<p>DefaultAdvisorAutoProxyCreator 빈 후처리가 등록되어 있다면, 스프링은 빈 오브젝트를 만들 때마다 후처리기에게 빈을 보낸다.</p>\n<ol>\n<li>후처리기는 <code>빈으로 등록된 모든 어드바이저 내의 포인트컷을 이용해</code> 전달받은 빈이 프록시 적용 대상인지 확인한다.</li>\n<li>프록시 적용 대상이면 내장된 프록시 생성기를 통해 현재 빈에 대한 <code>프록시를 생성하고 어드바이저를 연결한다.</code></li>\n<li>프록시가 생성되면 전달받은 Target Bean 오브젝트 대신에 Proxy 오브젝트를 스프링 컨테이너에게 돌려준다.</li>\n<li>컨테이너는 빈 후처리가 돌려준 Proxy 오브젝트를 빈으로 등록한다.</li>\n</ol>\n<p>이 후처리기를 통해 일일이 ProxyFactoryBean을 빈으로 등록하지 않아도 여러 타깃 오브젝트에 자동으로 프록시를 적용시킬 수 있다.</p>\n<h1 id=\"요약\"><a href=\"#요약\" class=\"headerlink\" title=\"요약..\"></a>요약..</h1><ul>\n<li>Spring AOP는 무조건 Proxy 기반의 RTW(Run Time Weaving)을 적용한 AOP방식이다.</li>\n<li>Spring AOP에서 사용하는 Proxy는 JDK Dynamic Proxy와 CGLIB Proxy를 사용한다.<ul>\n<li>JDK Dynamic Proxy는 Interface 기반으로 생성 된다. (반드시 Interface가 있어야지만 생성가능하다)</li>\n<li>CGLIB Proxy는 Class에 대한 Proxy생성을 지원한다 (상속을 이용)<br>따라서 final이나 private Method에 대한 AOP 불가 (상속 된 Proxy 객체 생성 시, Override가 불가하기 때문)</li>\n</ul>\n</li>\n<li>Spring AOP에서는 Method에 대해서만 JoinPoint를 지원한다.<br>(그 이상의 Join Point를 이용하기 위해서는 AspectJ와 같은 모듈을 이용해야 한다.)</li>\n</ul>\n<h1 id=\"참고\"><a href=\"#참고\" class=\"headerlink\" title=\"참고\"></a>참고</h1><p>토비의 스프링 vol.1</p>\n<p><a href=\"http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220556587811\" target=\"_blank\" rel=\"noopener\">http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220556587811</a></p>\n<p><a href=\"https://ko.wikipedia.org/wiki/%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84_%EC%9B%90%EC%B9%99\" target=\"_blank\" rel=\"noopener\">https://ko.wikipedia.org/wiki/%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84_%EC%9B%90%EC%B9%99</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>앞서 AOP에대한 간단한 예시와 개념을 살펴보았다.</p>\n<p>이번 포스트에서는 Spring에서 제공하는 AOP 기능과 작동방식에 대해서 알아보도록 하겠다.</p>\n<h1 id=\"Spring-AOP\"><a href=\"#Spring-AOP\" class=\"headerlink\" title=\"Spring AOP\"></a>Spring AOP</h1><p>AOP란 <code>횡단 관심사 (Cross Cutting Concern)</code> 을 한데 모아 로직을 설계한다음<br>런타임(Runtime) 시, 클래스 로드 (Load Time) 시, 컴파일(Compile Time) 시, 횡단 로직을 핵심 로직에 적용하여 작동하게 해준다. </p>\n<p>이 중에서 Spring AOP는 Proxy를 이용하여 런타임 위빙(Runtime Weaving)을 이용하여 횡단 로직을 수행 할 수 있도록 한다.   Spring AOP에서 사용되는 Proxy는 2가지가 있다.<br>한가지는 JDK 1.3 부터 적용되기 시작한 JDK Dynamic Proxy가 있다. 이는 Java 라이브러리에서 제공하는 Proxy이다.<br>또 다른 한가지는 CGLIB Proxy가 있다. CGLIB를 사용하기 위해서는 개발하는 프로젝트에 CGLIB 라이브러리를 추가해야 사용이 가능하다.</p>\n<h1 id=\"Proxy란\"><a href=\"#Proxy란\" class=\"headerlink\" title=\"Proxy란?\"></a>Proxy란?</h1><p><img src=\"https://camo.githubusercontent.com/d799bd0ae9b0df6a67b6d2c69a29f1a8eba1d8d2/687474703a2f2f6366696c6532362e75662e746973746f72792e636f6d2f696d6167652f32343237303333373531344630464635313445334336\" alt=\"Proxy구성도\"></p>\n<blockquote>\n<p>Proxy란 마치 자신이 클라이언트가 사용하려고 하는 실제 대상인 것처럼 위장해서 클라이언트의 요청을 받아주는 것을 대리자, 대리인과 같은 역할을 하는 객체의 의미한다.</p>\n<p>그리고 프록시를 통해 최종적으로 요청을 위임받아 처리하는 실제 오브젝트를 타깃(Target) 또는 실체(Real Object) 라고 부른다.</p>\n<p>토비의 스프링 vol.1 (p. 430)</p>\n</blockquote>\n<p>토비의 스프링 책에서는 Proxy에 대한 정의를 위와 같이 하고 있다. 실제 Target이 담당하는 역할을 요청을 대리 받아서 요청 이전, 이후에 대한 추가적인 로직을 추가 할 수 있는 객체이다. 이렇게 하면 실제 Target이 담당하는 역할에 대해서는 관여 하지 않으면서 추가적인 역할을 추가 할 수 있기 때문이다. </p>\n<p>Spring에서는 Proxy를 이용해 객체지향의 5대원칙 중 하나인 OCP(Open-Close Principal : 개방폐쇄의 원칙)을 적용하고 있다.</p>\n<blockquote>\n<p>OCP (Open-Close Principal : 개방 폐쇄의 원칙)</p>\n<p><strong>개방-폐쇄 원칙</strong>(OCP, Open-Closed Principle)은 ‘소프트웨어 개체(클래스, 모듈, 함수 등등)는 확장에 대해 열려 있어야 하고, 수정에 대해서는 닫혀 있어야 한다.’는 프로그래밍 원칙이다.  </p>\n</blockquote>\n<p>실제 Target에 대한 수정을 하지 않으면서, Proxy를 통해 추가적인 코드를 작성 하여 기능을 확장 시킬 수 있음을 의미한다.</p>\n<h1 id=\"Proxy-vs-Proxy-Pattern\"><a href=\"#Proxy-vs-Proxy-Pattern\" class=\"headerlink\" title=\"Proxy vs Proxy Pattern\"></a>Proxy vs Proxy Pattern</h1><p>일반적으로 사용하는 하는 Proxy라는 용어와 디자인패턴에서 말하는 프록시 패턴(Proxy Pattern)은 구분할 필요가 있다.<br>비슷한 개념이지만, 내용이 조금 다르다.</p>\n<p>일반적으로 부르는 Proxy는 실제 Target의 기능을 수행하면서 기능을 확장하거나 추가 하는 실제 객체(Object)를 의미한다.</p>\n<p>Proxy Pattern은 실제로 Target에 대한 기능을 확장하거나, 추가하지 않는다. 그저 클라이언트가 타깃에 접근하는 방식을 변경해 주는 역할을 한다.</p>\n<h1 id=\"JDK-Dynamic-Proxy\"><a href=\"#JDK-Dynamic-Proxy\" class=\"headerlink\" title=\"JDK Dynamic Proxy\"></a>JDK Dynamic Proxy</h1><p><img src=\"https://images.techhive.com/images/idge/imported/article/jvw/2000/11/jw-1110-proxy-100157716-orig.gif\" alt=\"JDK Dynamic Proxy\"></p>\n<p>JDK Dynamic Proxy는 JDK 1.3+ 부터 제공되는 Proxy Factory에 의해 런타임 시 동적으로 만들어 지는 오브젝트이다.<br>JDK Dynamic Proxy는 반드시 Interface가 정의 되어있고, Interface에 대한 명세를 기준으로 Proxy를 생성한다.<br>따라서 Interface 선언에 대한 강제성이 있다는 단점이 있다.<br>이전에는 직접 수동으로 Proxy 객체를 만들어서 사용하는 경우도 있었으나, 요즘은 자동 프록시 생성기라는 모듈을 이용하여 Dynamic Proxy를 생성한다. </p>\n<p>내부적으로 Dynamic Proxy에서는 InvocationHandler라는 Interface를 구현하여 만들어지는데 InvocationHandler의 invoke라는 함수를 Override하여 Proxy의 위임 기능을 수행한다. 이 과정에서 Object에 대해 Reflection기능을 사용하여 기능을 구현하기 때문에 퍼포먼스의 하락의 원인이 되기도 한다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExamDynamicHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ExamInterface target; <span class=\"comment\">// 타깃 객체에 대한 클래스를 직접 참조하는것이 아닌 Interface를 이용</span></span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExamDynamicHandler</span><span class=\"params\">(ExamInterface target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        <span class=\"comment\">// 메소드에 대한 명세, 파라미터등을 가져오는 과정에서 Reflection 사용</span></span><br><span class=\"line\">        String ret = (String)method.invoke(target, args); <span class=\"comment\">//타입 Safe하지 않는 단점이 있다.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret.toUpperCase(); <span class=\"comment\">//메소드 기능에 대한 확장</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"CGLIB-Proxy\"><a href=\"#CGLIB-Proxy\" class=\"headerlink\" title=\"CGLIB Proxy\"></a>CGLIB Proxy</h1><p>CGLIB Proxy는 순수 Java JDK 라이브러리를 이용하는 것이 아닌 CGLIB라는 외부 라이브러리를 추가해야만 사용할 수 있다.<br>실제 CGLIB의 Enhancer라는 클래스를 바탕으로 Proxy를 생성하며, JDK Dynamic Proxy의 단점인 Interface가 없어도 Proxy를 생성 할 수 있다. CGLIB Proxy는 Target Class를 상속받아 생성된다. 그렇기 때문에 개발자는 Proxy를 생성 하기 위해 굳이 Interface를 만들어야 하는 수고를 덜 수 있다.</p>\n<p>하지만, 상속을 이용하는 만큼 final이나 private과 같이 상속에 대해 Override를 지원하지 않는 경우 Proxy에서 해당 메소드에 대한 Aspect를 적용할 수 없다는 단점이 있다. </p>\n<p>CGLIB Proxy의 경우 실제 바이트 코드를 조작하여 JDK Dynamic Proxy보다는 퍼포먼스가 상대적으로 빠른 장점이 있다.</p>\n<p><img src=\"http://www.baeldung.com/wp-content/uploads/2017/10/springaop-process.png\" alt=\"CGLIB Proxy\"></p>\n<ul>\n<li><p>CGLIB Proxy 설정법</p>\n</li>\n<li><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">spring.aop.proxy-target-class=false</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"true\"</span>/&gt;</span> <span class=\"comment\">&lt;!-- AspectJ를 사용하는 경우 --&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//AOP를 사용하는 경우 Interface가 있더라도 cglib사용(target class기반)을 강제한다</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAsync</span>(proxyTargetClass = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableCaching</span>(proxyTargetClass = <span class=\"keyword\">true</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Spring-Bean에-대한-Proxy는\"><a href=\"#Spring-Bean에-대한-Proxy는\" class=\"headerlink\" title=\"Spring Bean에 대한 Proxy는?\"></a>Spring Bean에 대한 Proxy는?</h1><p>Spring에서 Bean으로 등록된 객체는 싱글톤으로 등록되어 IoC 컨테이너에서 관리 된다.<br>하지만 Bean 객체에 대해 Spring AOP를 적용하는 경우 Proxy가 생성 될 텐데.. 이 경우 이 Bean을 DI하여 사용하는 곳에서는 어떻게 Proxy를 주입하여 사용할까?</p>\n<p><img src=\"https://dhsim86.github.io/static/assets/img/blog/web/2017-09-11-toby_spring_06_aop_2/00.png\" alt=\"00.png\"></p>\n<p>Spring에서는 <code>자동 프록시 생성기</code> 라는 것이 있다.</p>\n<p>빈 후처리기들 중에서 자동으로 프록시를 생성하기 위해  <code>DefaultAdvisorAutoProxyCreator</code> 라는 클래스를 사용한다.<br>이 클래스는 어드바이저를 이용한 <code>자동 프록시 생성기</code> 이다. 빈 오브젝트의 일부를 프록시로 포장하고, 프록시를 빈으로 대신 등록시킬 수 있다.</p>\n<p>DefaultAdvisorAutoProxyCreator 빈 후처리가 등록되어 있다면, 스프링은 빈 오브젝트를 만들 때마다 후처리기에게 빈을 보낸다.</p>\n<ol>\n<li>후처리기는 <code>빈으로 등록된 모든 어드바이저 내의 포인트컷을 이용해</code> 전달받은 빈이 프록시 적용 대상인지 확인한다.</li>\n<li>프록시 적용 대상이면 내장된 프록시 생성기를 통해 현재 빈에 대한 <code>프록시를 생성하고 어드바이저를 연결한다.</code></li>\n<li>프록시가 생성되면 전달받은 Target Bean 오브젝트 대신에 Proxy 오브젝트를 스프링 컨테이너에게 돌려준다.</li>\n<li>컨테이너는 빈 후처리가 돌려준 Proxy 오브젝트를 빈으로 등록한다.</li>\n</ol>\n<p>이 후처리기를 통해 일일이 ProxyFactoryBean을 빈으로 등록하지 않아도 여러 타깃 오브젝트에 자동으로 프록시를 적용시킬 수 있다.</p>\n<h1 id=\"요약\"><a href=\"#요약\" class=\"headerlink\" title=\"요약..\"></a>요약..</h1><ul>\n<li>Spring AOP는 무조건 Proxy 기반의 RTW(Run Time Weaving)을 적용한 AOP방식이다.</li>\n<li>Spring AOP에서 사용하는 Proxy는 JDK Dynamic Proxy와 CGLIB Proxy를 사용한다.<ul>\n<li>JDK Dynamic Proxy는 Interface 기반으로 생성 된다. (반드시 Interface가 있어야지만 생성가능하다)</li>\n<li>CGLIB Proxy는 Class에 대한 Proxy생성을 지원한다 (상속을 이용)<br>따라서 final이나 private Method에 대한 AOP 불가 (상속 된 Proxy 객체 생성 시, Override가 불가하기 때문)</li>\n</ul>\n</li>\n<li>Spring AOP에서는 Method에 대해서만 JoinPoint를 지원한다.<br>(그 이상의 Join Point를 이용하기 위해서는 AspectJ와 같은 모듈을 이용해야 한다.)</li>\n</ul>\n<h1 id=\"참고\"><a href=\"#참고\" class=\"headerlink\" title=\"참고\"></a>참고</h1><p>토비의 스프링 vol.1</p>\n<p><a href=\"http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220556587811\" target=\"_blank\" rel=\"noopener\">http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220556587811</a></p>\n<p><a href=\"https://ko.wikipedia.org/wiki/%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84_%EC%9B%90%EC%B9%99\" target=\"_blank\" rel=\"noopener\">https://ko.wikipedia.org/wiki/%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84_%EC%9B%90%EC%B9%99</a></p>\n"},{"layout":"post","title":"Spring AOP (4)","subtitle":"4. AspectJ","date":"2018-07-21T03:52:33.000Z","background":"/img/posts/06.jpg","_content":"\n# AspectJ란?\n\n> AspectJ는 PARC에서 개발한 자바 프로그래밍 언어용 관점 지향 프로그래밍 (AOP) 확장 기능이다. 이클립스 재단 오픈 소스 프로젝트에서 독립형 또는 이클립스로 통합하여 이용 가능하다. AspectJ는 최종 사용자를 위한 단순함과 이용성을 강조함으로써 폭넓게 사용되는 AOP에 대한 디 팩터 표준(사실 상 표준)이 되었다.\n\nAspectJ란 순수 Spring AOP API에서 제공하지 않는 필드에 대한 Advisor를 지원하고, `CTW, LTW과 같은 다양한 위빙` 방법을이용할 수 있는 기능을 제공하여 프로그램의 퍼포먼스를 향상 시킬 수 있도록 해준다.\n또한 @Aspect 어노테이션을 바탕으로 Aspect 로직을 작성 할 수 있어 기존의 xml방식보다는 더 편리하다.\n현재는 Spring AOP + AspectJ는 거의 표준이라고 할 정도로 많이 사용이 되고 있는 추세다. AspectJ는 스프링 뿐만 아니라 AOP를 지원하지 않는 프레임 워크에서도 AOP를 지원할 수 있도록 도움을 주는 API이다.\n\n\n\n> Aspect란?\n>\n> Aspect란 객체지향 언어의 클래스와 비슷한 개념이라고 생각하면 이해하기 쉽다.\n> 그 자체로 애플리케이션의 도메인 로직을 담은 핵심기능은 아니지만, 많은 오브젝트에 걸쳐서 필요한 부가기능을 추상화 해놓은 것이다.\n> 구조적으로 보자면 Aspect = PointCut + Advisor이다.\n\n \n\n# 위빙 Weaving\n\n위빙(Weaving) 이란? Aspect 클래스에 정의 한 Advice 로직을 타깃(Target)에 적용하는 것을 의미한다.\n위빙 방법으로는 RTW, CTW, LTW 3가지가 있다.\n\n\n\n##런타임 시, 위빙 (RTW: Runtime Weaving)\n\nSpring AOP에서 사용하는 위빙 방식이다. Proxy를 생성하여 실제 타깃(Target) 오브젝트의 변형없이 위빙을 수행한다.\n실제 런타임 상, Method 호출 시에 위빙이 이루어 지는 방식이다.\n소스파일, 클래스 파일에 대한 변형이 없다는 장점이 있지만, 포인트 컷에 대한 어드바이스 적용 갯수가 늘어 날수록 성능이 떨어진다는 단점이 있다. 또한 메소드 호출에 대해서만 어드바이스를 적용 할 수 있다.\n\n![Spring aopì ëí ì´ë¯¸ì§ ê²ìê²°ê³¼](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRArzBX0BqyZ3iAK8yaBbFHkewLoHMLGLEy_BEUkOzZ6g5IBXTcNw)\\\n\n\n\n\n\n## 컴파일 시, 위빙 (CTW: Compile time Weaving)\n\nAspectJ에는 AJC (AspectJ Compiler)라는 컴파일러가 있는데 Java Compiler를 확장한 형태의 컴파일러이다.\nAJC를 통해 java파일을 컴파일 하며, 컴파일 과정에서 바이트 코드 조작을 통해 Advisor 코드를 직접 삽입하여 위빙을 수행한다.\n장점으로는 3가지 위빙 중에서는 가장 빠른 퍼포먼스를 보여준다. (JVM 상에 올라갈 때 메소드 내에 이미 advise 코드가 삽입 되어있기 때문) 하지만 컴파일 과정에서 lombok과 같이 컴파일 과정에서 코드를 조작하는 플러그인과 충돌이 발생할 가능성이 아주 높다. (거의 같이 사용 불가)\n\n\n\n### CTW를 사용하기 위한 메이븐 설정\n\n**라이브러리 추가:** (pom.xml)\n\n```xml\n<dependency>\n    <groupId>org.aspectj</groupId>\n    <artifactId>aspectjrt</artifactId>\n    <version>1.8.6</version>\n    <scope>runtime</scope>\n</dependency>\n \n<dependency>\n    <groupId>org.aspectj</groupId>\n    <artifactId>aspectjtools</artifactId>\n    <version>1.8.6</version>\n</dependency> \n```\n\n**플러그인 설정:** (pom.xml)\n\n```xml\n<plugin>\n    <groupId>org.codehaus.mojo</groupId>\n    <artifactId>aspectj-maven-plugin</artifactId>\n    <version>1.7</version>\n    <configuration>\n        <showWeaveInfo>true</showWeaveInfo>\n            <source>${aspectj-compiler.version}</source>\n            <target>${aspectj-compiler.version}</target>\n            <verbose>true</verbose>\n            <complianceLevel>${aspectj-compiler.version}</complianceLevel>\n            <outxml>true</outxml>\n    </configuration>\n    <executions>\n        <execution>\n            <goals>\n                <goal>compile</goal>\n                <goal>test-compile</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n*(\\*IntelliJ를 사용하고 있다면 설정에서 컴파일러를 AJC 로 변경하여 손쉽게 CTW를 사용할 수 있다.)*\n\n위의 플러그인 설정은 mojohaus에 제공하는 aspects-maven-plugin을 사용 \n\nAspectJ Compiler(AJC)를 사용하여 AspectJ Aspect를 클래스에 적용\n\n\n\n![image-20180722202803438](/var/folders/kw/rqny4sdn787dzr4v7013w0qr0000gn/T/abnerworks.Typora/image-20180722202803438.png)\n\n\n\n## 클래스 로드 시, 위빙 (LTW: Load time Weaving)\n\n ClassLoader를 이용하여 클래스가 JVM에 로드 될 때 바이트 코드 조작을 통해 위빙이 되는 방식\nRTW처럼 소스파일과 클래스 파일에 조작을 가하지 않아 컴파일 시간은 상대적으로 CTW보다 짧다. 하지만 오브젝트가 메모리에 올라가는 과정에서 위빙이 일어나기 때문에 런타임 시, 시간은 CTW보다 상대적으로 느리다.\nApplication Context에 객체가 로드될 때, aspectj weaver와 spring-instrument에 의한 객체 handling이 발생하기 때문에 performance가 저하된다.\n\n그리고 설정이 가장 복잡하지 않은가 싶다..\n\n아래 내용들은 LTW를 사용하기 위해 해줘야 하는 설정들이다.\n\n~~~xml\n<context:load-time-weaver/> <!-- 스프링 설정 파일에 추가 servlet.xml -->\n~~~\n\n~~~java\n@EnableLoadTimeWeaving //Java Configuration에서 해당 LTW기능을 사용하도록 설정해준다.\n~~~\n\n~~~vm\n//IDE에서 개발 시, 해당 설정을 추가\n-javaagent:/fullpath/aspectjweaver-1.8.1.jar \n-javaagent:/fullpath/spring-instrument-4.0.6.RELEASE.jar \n~~~\n\n~~~\n//톰캣 시작 시, jvmargs 옵션에 추가\n-javaagent:/weavers/spring-instrument-4.0.6.RELEASE.jar\n~~~\n\n\n\n# Annotations\n\n## JoinPoint 관련 Annotations\n\n공통적으로 pointcut에 대한 표현식을 인자로 받는다.\n\n* @Before\n  * 메소드 실행 이전 부분에 대한 Joinpoint 설정\n* @Around\n  * ProceedingJoinPoint라는 파라미터를 이용하여 Target메소드 실행을 직접 제어 할 수 있다.\n  * 메소드 실행 시점을 기준으로 AOP로직을 구현할 수 있어 가장 강력하게 사용이 가능하다.\n* @After\n  * 메소드 실행 이후 부분의 대한 Joinpoint 설정\n* @AfterReturning\n  * 메소드 실행 이후 return 실행 이후 부분에 대한 Joinpoint 설정\n* @AfterThrowable\n  * 메소드 실행 시, Throw 이후 부분에 대한 Joinpoint 설정\n\n\n\n## Pointcut 관련 Annotation\n\n* @Pointcut\n  * Pointcut에 대한 표현식을 값으로 가짐\n  * @Pointcut이 적용된 메소드는 무조건 리턴타입이 void\n\n\n\n\n\n# Point Cut\n\n포인트 컷이란? 메소드의 Joinpoint에 대한 Advice가 언제 실행될 지를 지정하는데 사용한다.\n여러 메소드의 Joinpoint시점 여러개를 묶어 하나의 pointcut으로 만들 수 있다.\n\n![pointcut 개념](https://t1.daumcdn.net/cfile/tistory/223B623D548C415631)\n\n\n\n## 포인트 컷 표현식\n\nExpression을 이용한 pointcut 표현식\n\n![pointcut ííìì ëí ì´ë¯¸ì§ ê²ìê²°ê³¼](http://1.bp.blogspot.com/-pKNhsebIDls/VhWk6fUzqJI/AAAAAAAAAU0/dl6e6V3G1KE/s1600/pointcut%2Bexpression-execution.jpg)\n\n\n\n1. 접근 제어자 패턴 public이나 protected (private는 사용하지 말자 proxy구현 불가)\n   * \\* 인 경우 모든 접근제어자에 대해 설정 가능\n   * 생략 시, \\* 과 같은 효과\n\n2. 리턴 타입 : 메소드의 리턴 타입을 지정한다. (해당 타입으로 리턴되는 모든 메소드에 대한 Pointcut)\n   * 필수 적으로 기재해야 한다.\n   * \\* 을 통해 모든 리턴 타입에 대해 Pointcut을 설정 할 수 있다.\n3. Class 타입 : 클래스 타입 패턴 (해당 클래스에 대한 모든 메소드에 대해 Pointcut)\n   * 단, 패키지 명도 기재해야 함 \n   * com.springframework.aop.. 처럼 ..으로 붙이는 경우 하위 패키지에 대한 모든 클래스의 모든 메소드에 대해 Pointcut을 처리\n   * 필수 적으로 기재해야 한다.\n4. 메소드 명 : 특정 클래스 또는 패키지 하위의 메소드 명에 대해 Pointcut 설정\n   * 필수 적으로 기재해야 한다.\n   * 모든 메소드에 적용 하려면 \\* 을 사용\n5. 파라미터 타입 : 메소드의 파라미터 타입에 따른 Pointcut 설정\n   * 필수 적으로 기재해야 한다.\n   * ,로 구분하여 순서대로 파라미터를 기재한다.\n   * 타입과 갯수에 상관없다면 .. 또는 \\* 를 기재한다.\n6. 예외 타입 : 예외 클래스에 대해 Joinpoint를 설정 할 수 있다. (생략가능)\n\n\n\n## 예시\n\n- **execution(int minus(int, int))**: int 타입의 리턴 값, minus 라는 메소드 이름, 두 개의 int 파라미터를 가지는 메소드\n\n- **execution(\\* minus(int, int))**: 리턴 타입은 상관없이, minus 라는 메소드 이름, 두 개의 int 파라미터를 가지는 메소드\n\n- **execution(\\* minus(..))**: 리턴 타입과 파라미터의 종류 및 개수에 상관없이 minus 이름을 가진 메소드\n\n- **execution(\\* *(..))**: 리턴 타입, 파라미터, 메소드 이름에 상관없는 모든 메소드\n\n- **execution(\\* *())**: 리턴 타입, 메소드 이름에 상관없고 파라미터는 없는 모든 메소드\n\n- **execution(\\* springbook.aop.Target.*(..))**: springbook.aop.Target 클래스의 모든 메소드\n\n- **execution(\\* springbook.aop.*.*(..))**: springbook.aop 패키지의 모든 메소드, 단 서브패키지의 클래스는 포함 안된다.\n\n- **execution(\\* springbook.aop..*.*(..))**: springbook.aop 패키지의 모든 메소드, 서브패키지의 클래스까지 포함\n\n- **execution(\\* *..Target.*(..))**: 패키지에는 상관없이 Target 클래스의 모든 메소드\n\n- **execution(* *(..) throws Exception) **: Exception을 throw하는 모든 메소드\n\n- **within(com.springbook.aop.service.***) : service 패키지 내의 모든 Joinpoint\n\n- **within(com.springbook.aop.service..***) : service 패키지의 하위패키지 내의 모든 Joinpoint\n\n- **this(com.springbook.aop.service.UserService)** : UserService 인터페이스를 구현하는 프록시 객체의 모든 Joinpoint\n\n- **target(com.springbook.aop.service.UserService)** : UserService 인터페이스를 구현하는 대상 객체의 모든 Joinpoint\n\n- **args(java.utils.List)** : 파라미터가 1개이고 List타입인 모든 Joinpoint\n\n- **@target(org.springframework.transaction.annotation.Transactional)** :대상 객체가 @Transactional 어노테이션을 갖는 모든 결합점\n\n- **@within(org.springframework.transaction.annotation.Transactional)** : 대상 객체의 선언 타입이 @Transactional 어노테이션을 갖는 모든 결합점\n\n- **@annotation(org.springframework.transaction.annotation.Transactional)** : 실행 메소드가 @Transactional 어노테이션을 갖는 모든 결합점\n\n* **@args(com.xyz.security.Classified)** : 단일 파라미터를 받고, 전달된 인자 타입이 @Classified 어노테이션을 갖는 모든 결합점\n\n* **bean(UserRepository)** : “UserRepository” 빈\n\n* **!bean(UserRepository)** :  “UserRepository” 빈을 제외한 모든 빈\n\n* **bean(*)** : 모든 빈\n\n* **bean(user*)** : 이름이 'user'로 시작되는 모든 빈\n\n* **bean(*Repository)** : 이름이 “Repository”로 끝나는 모든 빈\n\n* **bean(user/*)** : 이름이 “user/“로 시작하는 모든 빈\n\n* **bean(*dataSource) || bean(*DataSource)** : 이름이 “dataSource” 나 “DataSource” 으로 끝나는 모든 빈\n\n \n\n# 예시코드\n\n## Aspect 파일 사용\n\n~~~java\npublic aspect TestAdvisor {\n    pointcut advicePoint() : execution(* com.example.advice..*(..));\n    \n    after(Joinpoint joinpoint) : advicePoint() {\n        System.out.println(\"처음으로 실행되는 로그\");\n    }\n    \n    after(Joinpoint joinpoint) : advicePoint() {\n        System.out.println(\"두번째로 실행되는 로그\");\n    }\n    \n    //order는 어떻게 주는건지 모르겠다.\n}\n~~~\n\n\n\n## @Aspect 어노테이션 사용\n\n~~~java\n@Aspect\npublic class TestAdvisor {\n    \n    /**\n    * advice패키지 하위의 모든 클래스의 모든 메소드에 대한 pointcut\n    */\n    @Pointcut(\"execution(* com.example.advice..*(..))\")\n    public void pointcut(){\n        \n    }\n    \n    @order(2) //order가 높은 순으로 먼저 실행\n    @After(pointcut=\"pointcut()\")\n    public void afterAdvice(Joinpoint joinpoint) {\n        System.out.println(\"처음으로 실행되는 로그\");\n    }\n    \n    @order(1)\n    @After(pointcut=\"pointcut()\")\n    public void showLog(Joinpoint joinpoint) {\n        System.out.println(\"두번째로 실행되는 로그\");\n    }\n}\n~~~\n\n\n\n\n\n# 참고\n\nhttp://blog.naver.com/PostView.nhn?blogId=tmondev&logNo=220564638014\n\nhttp://netframework.tistory.com/entry/LTW-CTW%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-Transactional%EC%9D%98-%EC%82%AC%EC%9A%A9\n\nhttps://steemit.com/kr-dev/@nhj12311/aop-aspectj-java-aop-5","source":"_posts/2018-07-21-spring-aop4.md","raw":"---\nlayout: post\ntitle:  \"Spring AOP (4)\"\nsubtitle: \"4. AspectJ\"\ndate:   2018-07-21 12:52:33 +0900\nbackground: '/img/posts/06.jpg'\n---\n\n# AspectJ란?\n\n> AspectJ는 PARC에서 개발한 자바 프로그래밍 언어용 관점 지향 프로그래밍 (AOP) 확장 기능이다. 이클립스 재단 오픈 소스 프로젝트에서 독립형 또는 이클립스로 통합하여 이용 가능하다. AspectJ는 최종 사용자를 위한 단순함과 이용성을 강조함으로써 폭넓게 사용되는 AOP에 대한 디 팩터 표준(사실 상 표준)이 되었다.\n\nAspectJ란 순수 Spring AOP API에서 제공하지 않는 필드에 대한 Advisor를 지원하고, `CTW, LTW과 같은 다양한 위빙` 방법을이용할 수 있는 기능을 제공하여 프로그램의 퍼포먼스를 향상 시킬 수 있도록 해준다.\n또한 @Aspect 어노테이션을 바탕으로 Aspect 로직을 작성 할 수 있어 기존의 xml방식보다는 더 편리하다.\n현재는 Spring AOP + AspectJ는 거의 표준이라고 할 정도로 많이 사용이 되고 있는 추세다. AspectJ는 스프링 뿐만 아니라 AOP를 지원하지 않는 프레임 워크에서도 AOP를 지원할 수 있도록 도움을 주는 API이다.\n\n\n\n> Aspect란?\n>\n> Aspect란 객체지향 언어의 클래스와 비슷한 개념이라고 생각하면 이해하기 쉽다.\n> 그 자체로 애플리케이션의 도메인 로직을 담은 핵심기능은 아니지만, 많은 오브젝트에 걸쳐서 필요한 부가기능을 추상화 해놓은 것이다.\n> 구조적으로 보자면 Aspect = PointCut + Advisor이다.\n\n \n\n# 위빙 Weaving\n\n위빙(Weaving) 이란? Aspect 클래스에 정의 한 Advice 로직을 타깃(Target)에 적용하는 것을 의미한다.\n위빙 방법으로는 RTW, CTW, LTW 3가지가 있다.\n\n\n\n##런타임 시, 위빙 (RTW: Runtime Weaving)\n\nSpring AOP에서 사용하는 위빙 방식이다. Proxy를 생성하여 실제 타깃(Target) 오브젝트의 변형없이 위빙을 수행한다.\n실제 런타임 상, Method 호출 시에 위빙이 이루어 지는 방식이다.\n소스파일, 클래스 파일에 대한 변형이 없다는 장점이 있지만, 포인트 컷에 대한 어드바이스 적용 갯수가 늘어 날수록 성능이 떨어진다는 단점이 있다. 또한 메소드 호출에 대해서만 어드바이스를 적용 할 수 있다.\n\n![Spring aopì ëí ì´ë¯¸ì§ ê²ìê²°ê³¼](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRArzBX0BqyZ3iAK8yaBbFHkewLoHMLGLEy_BEUkOzZ6g5IBXTcNw)\\\n\n\n\n\n\n## 컴파일 시, 위빙 (CTW: Compile time Weaving)\n\nAspectJ에는 AJC (AspectJ Compiler)라는 컴파일러가 있는데 Java Compiler를 확장한 형태의 컴파일러이다.\nAJC를 통해 java파일을 컴파일 하며, 컴파일 과정에서 바이트 코드 조작을 통해 Advisor 코드를 직접 삽입하여 위빙을 수행한다.\n장점으로는 3가지 위빙 중에서는 가장 빠른 퍼포먼스를 보여준다. (JVM 상에 올라갈 때 메소드 내에 이미 advise 코드가 삽입 되어있기 때문) 하지만 컴파일 과정에서 lombok과 같이 컴파일 과정에서 코드를 조작하는 플러그인과 충돌이 발생할 가능성이 아주 높다. (거의 같이 사용 불가)\n\n\n\n### CTW를 사용하기 위한 메이븐 설정\n\n**라이브러리 추가:** (pom.xml)\n\n```xml\n<dependency>\n    <groupId>org.aspectj</groupId>\n    <artifactId>aspectjrt</artifactId>\n    <version>1.8.6</version>\n    <scope>runtime</scope>\n</dependency>\n \n<dependency>\n    <groupId>org.aspectj</groupId>\n    <artifactId>aspectjtools</artifactId>\n    <version>1.8.6</version>\n</dependency> \n```\n\n**플러그인 설정:** (pom.xml)\n\n```xml\n<plugin>\n    <groupId>org.codehaus.mojo</groupId>\n    <artifactId>aspectj-maven-plugin</artifactId>\n    <version>1.7</version>\n    <configuration>\n        <showWeaveInfo>true</showWeaveInfo>\n            <source>${aspectj-compiler.version}</source>\n            <target>${aspectj-compiler.version}</target>\n            <verbose>true</verbose>\n            <complianceLevel>${aspectj-compiler.version}</complianceLevel>\n            <outxml>true</outxml>\n    </configuration>\n    <executions>\n        <execution>\n            <goals>\n                <goal>compile</goal>\n                <goal>test-compile</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n*(\\*IntelliJ를 사용하고 있다면 설정에서 컴파일러를 AJC 로 변경하여 손쉽게 CTW를 사용할 수 있다.)*\n\n위의 플러그인 설정은 mojohaus에 제공하는 aspects-maven-plugin을 사용 \n\nAspectJ Compiler(AJC)를 사용하여 AspectJ Aspect를 클래스에 적용\n\n\n\n![image-20180722202803438](/var/folders/kw/rqny4sdn787dzr4v7013w0qr0000gn/T/abnerworks.Typora/image-20180722202803438.png)\n\n\n\n## 클래스 로드 시, 위빙 (LTW: Load time Weaving)\n\n ClassLoader를 이용하여 클래스가 JVM에 로드 될 때 바이트 코드 조작을 통해 위빙이 되는 방식\nRTW처럼 소스파일과 클래스 파일에 조작을 가하지 않아 컴파일 시간은 상대적으로 CTW보다 짧다. 하지만 오브젝트가 메모리에 올라가는 과정에서 위빙이 일어나기 때문에 런타임 시, 시간은 CTW보다 상대적으로 느리다.\nApplication Context에 객체가 로드될 때, aspectj weaver와 spring-instrument에 의한 객체 handling이 발생하기 때문에 performance가 저하된다.\n\n그리고 설정이 가장 복잡하지 않은가 싶다..\n\n아래 내용들은 LTW를 사용하기 위해 해줘야 하는 설정들이다.\n\n~~~xml\n<context:load-time-weaver/> <!-- 스프링 설정 파일에 추가 servlet.xml -->\n~~~\n\n~~~java\n@EnableLoadTimeWeaving //Java Configuration에서 해당 LTW기능을 사용하도록 설정해준다.\n~~~\n\n~~~vm\n//IDE에서 개발 시, 해당 설정을 추가\n-javaagent:/fullpath/aspectjweaver-1.8.1.jar \n-javaagent:/fullpath/spring-instrument-4.0.6.RELEASE.jar \n~~~\n\n~~~\n//톰캣 시작 시, jvmargs 옵션에 추가\n-javaagent:/weavers/spring-instrument-4.0.6.RELEASE.jar\n~~~\n\n\n\n# Annotations\n\n## JoinPoint 관련 Annotations\n\n공통적으로 pointcut에 대한 표현식을 인자로 받는다.\n\n* @Before\n  * 메소드 실행 이전 부분에 대한 Joinpoint 설정\n* @Around\n  * ProceedingJoinPoint라는 파라미터를 이용하여 Target메소드 실행을 직접 제어 할 수 있다.\n  * 메소드 실행 시점을 기준으로 AOP로직을 구현할 수 있어 가장 강력하게 사용이 가능하다.\n* @After\n  * 메소드 실행 이후 부분의 대한 Joinpoint 설정\n* @AfterReturning\n  * 메소드 실행 이후 return 실행 이후 부분에 대한 Joinpoint 설정\n* @AfterThrowable\n  * 메소드 실행 시, Throw 이후 부분에 대한 Joinpoint 설정\n\n\n\n## Pointcut 관련 Annotation\n\n* @Pointcut\n  * Pointcut에 대한 표현식을 값으로 가짐\n  * @Pointcut이 적용된 메소드는 무조건 리턴타입이 void\n\n\n\n\n\n# Point Cut\n\n포인트 컷이란? 메소드의 Joinpoint에 대한 Advice가 언제 실행될 지를 지정하는데 사용한다.\n여러 메소드의 Joinpoint시점 여러개를 묶어 하나의 pointcut으로 만들 수 있다.\n\n![pointcut 개념](https://t1.daumcdn.net/cfile/tistory/223B623D548C415631)\n\n\n\n## 포인트 컷 표현식\n\nExpression을 이용한 pointcut 표현식\n\n![pointcut ííìì ëí ì´ë¯¸ì§ ê²ìê²°ê³¼](http://1.bp.blogspot.com/-pKNhsebIDls/VhWk6fUzqJI/AAAAAAAAAU0/dl6e6V3G1KE/s1600/pointcut%2Bexpression-execution.jpg)\n\n\n\n1. 접근 제어자 패턴 public이나 protected (private는 사용하지 말자 proxy구현 불가)\n   * \\* 인 경우 모든 접근제어자에 대해 설정 가능\n   * 생략 시, \\* 과 같은 효과\n\n2. 리턴 타입 : 메소드의 리턴 타입을 지정한다. (해당 타입으로 리턴되는 모든 메소드에 대한 Pointcut)\n   * 필수 적으로 기재해야 한다.\n   * \\* 을 통해 모든 리턴 타입에 대해 Pointcut을 설정 할 수 있다.\n3. Class 타입 : 클래스 타입 패턴 (해당 클래스에 대한 모든 메소드에 대해 Pointcut)\n   * 단, 패키지 명도 기재해야 함 \n   * com.springframework.aop.. 처럼 ..으로 붙이는 경우 하위 패키지에 대한 모든 클래스의 모든 메소드에 대해 Pointcut을 처리\n   * 필수 적으로 기재해야 한다.\n4. 메소드 명 : 특정 클래스 또는 패키지 하위의 메소드 명에 대해 Pointcut 설정\n   * 필수 적으로 기재해야 한다.\n   * 모든 메소드에 적용 하려면 \\* 을 사용\n5. 파라미터 타입 : 메소드의 파라미터 타입에 따른 Pointcut 설정\n   * 필수 적으로 기재해야 한다.\n   * ,로 구분하여 순서대로 파라미터를 기재한다.\n   * 타입과 갯수에 상관없다면 .. 또는 \\* 를 기재한다.\n6. 예외 타입 : 예외 클래스에 대해 Joinpoint를 설정 할 수 있다. (생략가능)\n\n\n\n## 예시\n\n- **execution(int minus(int, int))**: int 타입의 리턴 값, minus 라는 메소드 이름, 두 개의 int 파라미터를 가지는 메소드\n\n- **execution(\\* minus(int, int))**: 리턴 타입은 상관없이, minus 라는 메소드 이름, 두 개의 int 파라미터를 가지는 메소드\n\n- **execution(\\* minus(..))**: 리턴 타입과 파라미터의 종류 및 개수에 상관없이 minus 이름을 가진 메소드\n\n- **execution(\\* *(..))**: 리턴 타입, 파라미터, 메소드 이름에 상관없는 모든 메소드\n\n- **execution(\\* *())**: 리턴 타입, 메소드 이름에 상관없고 파라미터는 없는 모든 메소드\n\n- **execution(\\* springbook.aop.Target.*(..))**: springbook.aop.Target 클래스의 모든 메소드\n\n- **execution(\\* springbook.aop.*.*(..))**: springbook.aop 패키지의 모든 메소드, 단 서브패키지의 클래스는 포함 안된다.\n\n- **execution(\\* springbook.aop..*.*(..))**: springbook.aop 패키지의 모든 메소드, 서브패키지의 클래스까지 포함\n\n- **execution(\\* *..Target.*(..))**: 패키지에는 상관없이 Target 클래스의 모든 메소드\n\n- **execution(* *(..) throws Exception) **: Exception을 throw하는 모든 메소드\n\n- **within(com.springbook.aop.service.***) : service 패키지 내의 모든 Joinpoint\n\n- **within(com.springbook.aop.service..***) : service 패키지의 하위패키지 내의 모든 Joinpoint\n\n- **this(com.springbook.aop.service.UserService)** : UserService 인터페이스를 구현하는 프록시 객체의 모든 Joinpoint\n\n- **target(com.springbook.aop.service.UserService)** : UserService 인터페이스를 구현하는 대상 객체의 모든 Joinpoint\n\n- **args(java.utils.List)** : 파라미터가 1개이고 List타입인 모든 Joinpoint\n\n- **@target(org.springframework.transaction.annotation.Transactional)** :대상 객체가 @Transactional 어노테이션을 갖는 모든 결합점\n\n- **@within(org.springframework.transaction.annotation.Transactional)** : 대상 객체의 선언 타입이 @Transactional 어노테이션을 갖는 모든 결합점\n\n- **@annotation(org.springframework.transaction.annotation.Transactional)** : 실행 메소드가 @Transactional 어노테이션을 갖는 모든 결합점\n\n* **@args(com.xyz.security.Classified)** : 단일 파라미터를 받고, 전달된 인자 타입이 @Classified 어노테이션을 갖는 모든 결합점\n\n* **bean(UserRepository)** : “UserRepository” 빈\n\n* **!bean(UserRepository)** :  “UserRepository” 빈을 제외한 모든 빈\n\n* **bean(*)** : 모든 빈\n\n* **bean(user*)** : 이름이 'user'로 시작되는 모든 빈\n\n* **bean(*Repository)** : 이름이 “Repository”로 끝나는 모든 빈\n\n* **bean(user/*)** : 이름이 “user/“로 시작하는 모든 빈\n\n* **bean(*dataSource) || bean(*DataSource)** : 이름이 “dataSource” 나 “DataSource” 으로 끝나는 모든 빈\n\n \n\n# 예시코드\n\n## Aspect 파일 사용\n\n~~~java\npublic aspect TestAdvisor {\n    pointcut advicePoint() : execution(* com.example.advice..*(..));\n    \n    after(Joinpoint joinpoint) : advicePoint() {\n        System.out.println(\"처음으로 실행되는 로그\");\n    }\n    \n    after(Joinpoint joinpoint) : advicePoint() {\n        System.out.println(\"두번째로 실행되는 로그\");\n    }\n    \n    //order는 어떻게 주는건지 모르겠다.\n}\n~~~\n\n\n\n## @Aspect 어노테이션 사용\n\n~~~java\n@Aspect\npublic class TestAdvisor {\n    \n    /**\n    * advice패키지 하위의 모든 클래스의 모든 메소드에 대한 pointcut\n    */\n    @Pointcut(\"execution(* com.example.advice..*(..))\")\n    public void pointcut(){\n        \n    }\n    \n    @order(2) //order가 높은 순으로 먼저 실행\n    @After(pointcut=\"pointcut()\")\n    public void afterAdvice(Joinpoint joinpoint) {\n        System.out.println(\"처음으로 실행되는 로그\");\n    }\n    \n    @order(1)\n    @After(pointcut=\"pointcut()\")\n    public void showLog(Joinpoint joinpoint) {\n        System.out.println(\"두번째로 실행되는 로그\");\n    }\n}\n~~~\n\n\n\n\n\n# 참고\n\nhttp://blog.naver.com/PostView.nhn?blogId=tmondev&logNo=220564638014\n\nhttp://netframework.tistory.com/entry/LTW-CTW%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-Transactional%EC%9D%98-%EC%82%AC%EC%9A%A9\n\nhttps://steemit.com/kr-dev/@nhj12311/aop-aspectj-java-aop-5","slug":"2018-07-21-spring-aop4","published":1,"updated":"2018-07-24T15:50:32.529Z","comments":1,"photos":[],"link":"","_id":"cjkic64ou0003vcya9z5w4lqq","content":"<h1 id=\"AspectJ란\"><a href=\"#AspectJ란\" class=\"headerlink\" title=\"AspectJ란?\"></a>AspectJ란?</h1><blockquote>\n<p>AspectJ는 PARC에서 개발한 자바 프로그래밍 언어용 관점 지향 프로그래밍 (AOP) 확장 기능이다. 이클립스 재단 오픈 소스 프로젝트에서 독립형 또는 이클립스로 통합하여 이용 가능하다. AspectJ는 최종 사용자를 위한 단순함과 이용성을 강조함으로써 폭넓게 사용되는 AOP에 대한 디 팩터 표준(사실 상 표준)이 되었다.</p>\n</blockquote>\n<p>AspectJ란 순수 Spring AOP API에서 제공하지 않는 필드에 대한 Advisor를 지원하고, <code>CTW, LTW과 같은 다양한 위빙</code> 방법을이용할 수 있는 기능을 제공하여 프로그램의 퍼포먼스를 향상 시킬 수 있도록 해준다.<br>또한 @Aspect 어노테이션을 바탕으로 Aspect 로직을 작성 할 수 있어 기존의 xml방식보다는 더 편리하다.<br>현재는 Spring AOP + AspectJ는 거의 표준이라고 할 정도로 많이 사용이 되고 있는 추세다. AspectJ는 스프링 뿐만 아니라 AOP를 지원하지 않는 프레임 워크에서도 AOP를 지원할 수 있도록 도움을 주는 API이다.</p>\n<blockquote>\n<p>Aspect란?</p>\n<p>Aspect란 객체지향 언어의 클래스와 비슷한 개념이라고 생각하면 이해하기 쉽다.<br>그 자체로 애플리케이션의 도메인 로직을 담은 핵심기능은 아니지만, 많은 오브젝트에 걸쳐서 필요한 부가기능을 추상화 해놓은 것이다.<br>구조적으로 보자면 Aspect = PointCut + Advisor이다.</p>\n</blockquote>\n<h1 id=\"위빙-Weaving\"><a href=\"#위빙-Weaving\" class=\"headerlink\" title=\"위빙 Weaving\"></a>위빙 Weaving</h1><p>위빙(Weaving) 이란? Aspect 클래스에 정의 한 Advice 로직을 타깃(Target)에 적용하는 것을 의미한다.<br>위빙 방법으로는 RTW, CTW, LTW 3가지가 있다.</p>\n<p>##런타임 시, 위빙 (RTW: Runtime Weaving)</p>\n<p>Spring AOP에서 사용하는 위빙 방식이다. Proxy를 생성하여 실제 타깃(Target) 오브젝트의 변형없이 위빙을 수행한다.<br>실제 런타임 상, Method 호출 시에 위빙이 이루어 지는 방식이다.<br>소스파일, 클래스 파일에 대한 변형이 없다는 장점이 있지만, 포인트 컷에 대한 어드바이스 적용 갯수가 늘어 날수록 성능이 떨어진다는 단점이 있다. 또한 메소드 호출에 대해서만 어드바이스를 적용 할 수 있다.</p>\n<p><img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRArzBX0BqyZ3iAK8yaBbFHkewLoHMLGLEy_BEUkOzZ6g5IBXTcNw\" alt=\"Spring aopì ëí ì´ë¯¸ì§ ê²ìê²°ê³¼\">\\</p>\n<h2 id=\"컴파일-시-위빙-CTW-Compile-time-Weaving\"><a href=\"#컴파일-시-위빙-CTW-Compile-time-Weaving\" class=\"headerlink\" title=\"컴파일 시, 위빙 (CTW: Compile time Weaving)\"></a>컴파일 시, 위빙 (CTW: Compile time Weaving)</h2><p>AspectJ에는 AJC (AspectJ Compiler)라는 컴파일러가 있는데 Java Compiler를 확장한 형태의 컴파일러이다.<br>AJC를 통해 java파일을 컴파일 하며, 컴파일 과정에서 바이트 코드 조작을 통해 Advisor 코드를 직접 삽입하여 위빙을 수행한다.<br>장점으로는 3가지 위빙 중에서는 가장 빠른 퍼포먼스를 보여준다. (JVM 상에 올라갈 때 메소드 내에 이미 advise 코드가 삽입 되어있기 때문) 하지만 컴파일 과정에서 lombok과 같이 컴파일 과정에서 코드를 조작하는 플러그인과 충돌이 발생할 가능성이 아주 높다. (거의 같이 사용 불가)</p>\n<h3 id=\"CTW를-사용하기-위한-메이븐-설정\"><a href=\"#CTW를-사용하기-위한-메이븐-설정\" class=\"headerlink\" title=\"CTW를 사용하기 위한 메이븐 설정\"></a>CTW를 사용하기 위한 메이븐 설정</h3><p><strong>라이브러리 추가:</strong> (pom.xml)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjrt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>플러그인 설정:</strong> (pom.xml)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.codehaus.mojo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectj-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">showWeaveInfo</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">showWeaveInfo</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>$&#123;aspectj-compiler.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>$&#123;aspectj-compiler.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">verbose</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">verbose</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">complianceLevel</span>&gt;</span>$&#123;aspectj-compiler.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">complianceLevel</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">outxml</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">outxml</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>test-compile<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>(\\</em>IntelliJ를 사용하고 있다면 설정에서 컴파일러를 AJC 로 변경하여 손쉽게 CTW를 사용할 수 있다.)*</p>\n<p>위의 플러그인 설정은 mojohaus에 제공하는 aspects-maven-plugin을 사용 </p>\n<p>AspectJ Compiler(AJC)를 사용하여 AspectJ Aspect를 클래스에 적용</p>\n<p><img src=\"/var/folders/kw/rqny4sdn787dzr4v7013w0qr0000gn/T/abnerworks.Typora/image-20180722202803438.png\" alt=\"image-20180722202803438\"></p>\n<h2 id=\"클래스-로드-시-위빙-LTW-Load-time-Weaving\"><a href=\"#클래스-로드-시-위빙-LTW-Load-time-Weaving\" class=\"headerlink\" title=\"클래스 로드 시, 위빙 (LTW: Load time Weaving)\"></a>클래스 로드 시, 위빙 (LTW: Load time Weaving)</h2><p> ClassLoader를 이용하여 클래스가 JVM에 로드 될 때 바이트 코드 조작을 통해 위빙이 되는 방식<br>RTW처럼 소스파일과 클래스 파일에 조작을 가하지 않아 컴파일 시간은 상대적으로 CTW보다 짧다. 하지만 오브젝트가 메모리에 올라가는 과정에서 위빙이 일어나기 때문에 런타임 시, 시간은 CTW보다 상대적으로 느리다.<br>Application Context에 객체가 로드될 때, aspectj weaver와 spring-instrument에 의한 객체 handling이 발생하기 때문에 performance가 저하된다.</p>\n<p>그리고 설정이 가장 복잡하지 않은가 싶다..</p>\n<p>아래 내용들은 LTW를 사용하기 위해 해줘야 하는 설정들이다.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:load-time-weaver</span>/&gt;</span> <span class=\"comment\">&lt;!-- 스프링 설정 파일에 추가 servlet.xml --&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableLoadTimeWeaving</span> <span class=\"comment\">//Java Configuration에서 해당 LTW기능을 사용하도록 설정해준다.</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//IDE에서 개발 시, 해당 설정을 추가</span><br><span class=\"line\">-javaagent:/fullpath/aspectjweaver-1.8.1.jar </span><br><span class=\"line\">-javaagent:/fullpath/spring-instrument-4.0.6.RELEASE.jar</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//톰캣 시작 시, jvmargs 옵션에 추가</span><br><span class=\"line\">-javaagent:/weavers/spring-instrument-4.0.6.RELEASE.jar</span><br></pre></td></tr></table></figure>\n<h1 id=\"Annotations\"><a href=\"#Annotations\" class=\"headerlink\" title=\"Annotations\"></a>Annotations</h1><h2 id=\"JoinPoint-관련-Annotations\"><a href=\"#JoinPoint-관련-Annotations\" class=\"headerlink\" title=\"JoinPoint 관련 Annotations\"></a>JoinPoint 관련 Annotations</h2><p>공통적으로 pointcut에 대한 표현식을 인자로 받는다.</p>\n<ul>\n<li>@Before<ul>\n<li>메소드 실행 이전 부분에 대한 Joinpoint 설정</li>\n</ul>\n</li>\n<li>@Around<ul>\n<li>ProceedingJoinPoint라는 파라미터를 이용하여 Target메소드 실행을 직접 제어 할 수 있다.</li>\n<li>메소드 실행 시점을 기준으로 AOP로직을 구현할 수 있어 가장 강력하게 사용이 가능하다.</li>\n</ul>\n</li>\n<li>@After<ul>\n<li>메소드 실행 이후 부분의 대한 Joinpoint 설정</li>\n</ul>\n</li>\n<li>@AfterReturning<ul>\n<li>메소드 실행 이후 return 실행 이후 부분에 대한 Joinpoint 설정</li>\n</ul>\n</li>\n<li>@AfterThrowable<ul>\n<li>메소드 실행 시, Throw 이후 부분에 대한 Joinpoint 설정</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Pointcut-관련-Annotation\"><a href=\"#Pointcut-관련-Annotation\" class=\"headerlink\" title=\"Pointcut 관련 Annotation\"></a>Pointcut 관련 Annotation</h2><ul>\n<li>@Pointcut<ul>\n<li>Pointcut에 대한 표현식을 값으로 가짐</li>\n<li>@Pointcut이 적용된 메소드는 무조건 리턴타입이 void</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Point-Cut\"><a href=\"#Point-Cut\" class=\"headerlink\" title=\"Point Cut\"></a>Point Cut</h1><p>포인트 컷이란? 메소드의 Joinpoint에 대한 Advice가 언제 실행될 지를 지정하는데 사용한다.<br>여러 메소드의 Joinpoint시점 여러개를 묶어 하나의 pointcut으로 만들 수 있다.</p>\n<p><img src=\"https://t1.daumcdn.net/cfile/tistory/223B623D548C415631\" alt=\"pointcut 개념\"></p>\n<h2 id=\"포인트-컷-표현식\"><a href=\"#포인트-컷-표현식\" class=\"headerlink\" title=\"포인트 컷 표현식\"></a>포인트 컷 표현식</h2><p>Expression을 이용한 pointcut 표현식</p>\n<p><img src=\"http://1.bp.blogspot.com/-pKNhsebIDls/VhWk6fUzqJI/AAAAAAAAAU0/dl6e6V3G1KE/s1600/pointcut%2Bexpression-execution.jpg\" alt=\"pointcut ííìì ëí ì´ë¯¸ì§ ê²ìê²°ê³¼\"></p>\n<ol>\n<li><p>접근 제어자 패턴 public이나 protected (private는 사용하지 말자 proxy구현 불가)</p>\n<ul>\n<li>* 인 경우 모든 접근제어자에 대해 설정 가능</li>\n<li>생략 시, * 과 같은 효과</li>\n</ul>\n</li>\n<li><p>리턴 타입 : 메소드의 리턴 타입을 지정한다. (해당 타입으로 리턴되는 모든 메소드에 대한 Pointcut)</p>\n<ul>\n<li>필수 적으로 기재해야 한다.</li>\n<li>* 을 통해 모든 리턴 타입에 대해 Pointcut을 설정 할 수 있다.</li>\n</ul>\n</li>\n<li>Class 타입 : 클래스 타입 패턴 (해당 클래스에 대한 모든 메소드에 대해 Pointcut)<ul>\n<li>단, 패키지 명도 기재해야 함 </li>\n<li>com.springframework.aop.. 처럼 ..으로 붙이는 경우 하위 패키지에 대한 모든 클래스의 모든 메소드에 대해 Pointcut을 처리</li>\n<li>필수 적으로 기재해야 한다.</li>\n</ul>\n</li>\n<li>메소드 명 : 특정 클래스 또는 패키지 하위의 메소드 명에 대해 Pointcut 설정<ul>\n<li>필수 적으로 기재해야 한다.</li>\n<li>모든 메소드에 적용 하려면 * 을 사용</li>\n</ul>\n</li>\n<li>파라미터 타입 : 메소드의 파라미터 타입에 따른 Pointcut 설정<ul>\n<li>필수 적으로 기재해야 한다.</li>\n<li>,로 구분하여 순서대로 파라미터를 기재한다.</li>\n<li>타입과 갯수에 상관없다면 .. 또는 * 를 기재한다.</li>\n</ul>\n</li>\n<li>예외 타입 : 예외 클래스에 대해 Joinpoint를 설정 할 수 있다. (생략가능)</li>\n</ol>\n<h2 id=\"예시\"><a href=\"#예시\" class=\"headerlink\" title=\"예시\"></a>예시</h2><ul>\n<li><p><strong>execution(int minus(int, int))</strong>: int 타입의 리턴 값, minus 라는 메소드 이름, 두 개의 int 파라미터를 가지는 메소드</p>\n</li>\n<li><p><strong>execution(* minus(int, int))</strong>: 리턴 타입은 상관없이, minus 라는 메소드 이름, 두 개의 int 파라미터를 가지는 메소드</p>\n</li>\n<li><p><strong>execution(* minus(..))</strong>: 리턴 타입과 파라미터의 종류 및 개수에 상관없이 minus 이름을 가진 메소드</p>\n</li>\n<li><p><strong>execution(* *(..))</strong>: 리턴 타입, 파라미터, 메소드 이름에 상관없는 모든 메소드</p>\n</li>\n<li><p><strong>execution(* *())</strong>: 리턴 타입, 메소드 이름에 상관없고 파라미터는 없는 모든 메소드</p>\n</li>\n<li><p><strong>execution(* springbook.aop.Target.*(..))</strong>: springbook.aop.Target 클래스의 모든 메소드</p>\n</li>\n<li><p><strong>execution(* springbook.aop.<em>.</em>(..))</strong>: springbook.aop 패키지의 모든 메소드, 단 서브패키지의 클래스는 포함 안된다.</p>\n</li>\n<li><p><strong>execution(* springbook.aop..<em>.</em>(..))</strong>: springbook.aop 패키지의 모든 메소드, 서브패키지의 클래스까지 포함</p>\n</li>\n<li><p><strong>execution(* <em>..Target.</em>(..))</strong>: 패키지에는 상관없이 Target 클래스의 모든 메소드</p>\n</li>\n<li><p><strong>execution(<em> </em>(..) throws Exception) </strong>: Exception을 throw하는 모든 메소드</p>\n</li>\n<li><p><strong>within(com.springbook.aop.service.*</strong>) : service 패키지 내의 모든 Joinpoint</p>\n</li>\n<li><p><strong>within(com.springbook.aop.service..*</strong>) : service 패키지의 하위패키지 내의 모든 Joinpoint</p>\n</li>\n<li><p><strong>this(com.springbook.aop.service.UserService)</strong> : UserService 인터페이스를 구현하는 프록시 객체의 모든 Joinpoint</p>\n</li>\n<li><p><strong>target(com.springbook.aop.service.UserService)</strong> : UserService 인터페이스를 구현하는 대상 객체의 모든 Joinpoint</p>\n</li>\n<li><p><strong>args(java.utils.List)</strong> : 파라미터가 1개이고 List타입인 모든 Joinpoint</p>\n</li>\n<li><p><strong>@target(org.springframework.transaction.annotation.Transactional)</strong> :대상 객체가 @Transactional 어노테이션을 갖는 모든 결합점</p>\n</li>\n<li><p><strong>@within(org.springframework.transaction.annotation.Transactional)</strong> : 대상 객체의 선언 타입이 @Transactional 어노테이션을 갖는 모든 결합점</p>\n</li>\n<li><p><strong>@annotation(org.springframework.transaction.annotation.Transactional)</strong> : 실행 메소드가 @Transactional 어노테이션을 갖는 모든 결합점</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>@args(com.xyz.security.Classified)</strong> : 단일 파라미터를 받고, 전달된 인자 타입이 @Classified 어노테이션을 갖는 모든 결합점</p>\n</li>\n<li><p><strong>bean(UserRepository)</strong> : “UserRepository” 빈</p>\n</li>\n<li><p><strong>!bean(UserRepository)</strong> :  “UserRepository” 빈을 제외한 모든 빈</p>\n</li>\n<li><p><strong>bean(*)</strong> : 모든 빈</p>\n</li>\n<li><p><strong>bean(user*)</strong> : 이름이 ‘user’로 시작되는 모든 빈</p>\n</li>\n<li><p><strong>bean(*Repository)</strong> : 이름이 “Repository”로 끝나는 모든 빈</p>\n</li>\n<li><p><strong>bean(user/*)</strong> : 이름이 “user/“로 시작하는 모든 빈</p>\n</li>\n<li><p><strong>bean(<em>dataSource) || bean(</em>DataSource)</strong> : 이름이 “dataSource” 나 “DataSource” 으로 끝나는 모든 빈</p>\n</li>\n</ul>\n<h1 id=\"예시코드\"><a href=\"#예시코드\" class=\"headerlink\" title=\"예시코드\"></a>예시코드</h1><h2 id=\"Aspect-파일-사용\"><a href=\"#Aspect-파일-사용\" class=\"headerlink\" title=\"Aspect 파일 사용\"></a>Aspect 파일 사용</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> aspect TestAdvisor &#123;</span><br><span class=\"line\">    <span class=\"function\">pointcut <span class=\"title\">advicePoint</span><span class=\"params\">()</span> : <span class=\"title\">execution</span><span class=\"params\">(* com.example.advice..*(..)</span>)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    after(Joinpoint joinpoint) : advicePoint() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"처음으로 실행되는 로그\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    after(Joinpoint joinpoint) : advicePoint() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"두번째로 실행되는 로그\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//order는 어떻게 주는건지 모르겠다.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Aspect-어노테이션-사용\"><a href=\"#Aspect-어노테이션-사용\" class=\"headerlink\" title=\"@Aspect 어노테이션 사용\"></a>@Aspect 어노테이션 사용</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestAdvisor</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * advice패키지 하위의 모든 클래스의 모든 메소드에 대한 pointcut</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.example.advice..*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pointcut</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@order</span>(<span class=\"number\">2</span>) <span class=\"comment\">//order가 높은 순으로 먼저 실행</span></span><br><span class=\"line\">    <span class=\"meta\">@After</span>(pointcut=<span class=\"string\">\"pointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterAdvice</span><span class=\"params\">(Joinpoint joinpoint)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"처음으로 실행되는 로그\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@order</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"meta\">@After</span>(pointcut=<span class=\"string\">\"pointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showLog</span><span class=\"params\">(Joinpoint joinpoint)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"두번째로 실행되는 로그\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"참고\"><a href=\"#참고\" class=\"headerlink\" title=\"참고\"></a>참고</h1><p><a href=\"http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220564638014\" target=\"_blank\" rel=\"noopener\">http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220564638014</a></p>\n<p><a href=\"http://netframework.tistory.com/entry/LTW-CTW%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-Transactional%EC%9D%98-%EC%82%AC%EC%9A%A9\" target=\"_blank\" rel=\"noopener\">http://netframework.tistory.com/entry/LTW-CTW%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-Transactional%EC%9D%98-%EC%82%AC%EC%9A%A9</a></p>\n<p><a href=\"https://steemit.com/kr-dev/@nhj12311/aop-aspectj-java-aop-5\" target=\"_blank\" rel=\"noopener\">https://steemit.com/kr-dev/@nhj12311/aop-aspectj-java-aop-5</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"AspectJ란\"><a href=\"#AspectJ란\" class=\"headerlink\" title=\"AspectJ란?\"></a>AspectJ란?</h1><blockquote>\n<p>AspectJ는 PARC에서 개발한 자바 프로그래밍 언어용 관점 지향 프로그래밍 (AOP) 확장 기능이다. 이클립스 재단 오픈 소스 프로젝트에서 독립형 또는 이클립스로 통합하여 이용 가능하다. AspectJ는 최종 사용자를 위한 단순함과 이용성을 강조함으로써 폭넓게 사용되는 AOP에 대한 디 팩터 표준(사실 상 표준)이 되었다.</p>\n</blockquote>\n<p>AspectJ란 순수 Spring AOP API에서 제공하지 않는 필드에 대한 Advisor를 지원하고, <code>CTW, LTW과 같은 다양한 위빙</code> 방법을이용할 수 있는 기능을 제공하여 프로그램의 퍼포먼스를 향상 시킬 수 있도록 해준다.<br>또한 @Aspect 어노테이션을 바탕으로 Aspect 로직을 작성 할 수 있어 기존의 xml방식보다는 더 편리하다.<br>현재는 Spring AOP + AspectJ는 거의 표준이라고 할 정도로 많이 사용이 되고 있는 추세다. AspectJ는 스프링 뿐만 아니라 AOP를 지원하지 않는 프레임 워크에서도 AOP를 지원할 수 있도록 도움을 주는 API이다.</p>\n<blockquote>\n<p>Aspect란?</p>\n<p>Aspect란 객체지향 언어의 클래스와 비슷한 개념이라고 생각하면 이해하기 쉽다.<br>그 자체로 애플리케이션의 도메인 로직을 담은 핵심기능은 아니지만, 많은 오브젝트에 걸쳐서 필요한 부가기능을 추상화 해놓은 것이다.<br>구조적으로 보자면 Aspect = PointCut + Advisor이다.</p>\n</blockquote>\n<h1 id=\"위빙-Weaving\"><a href=\"#위빙-Weaving\" class=\"headerlink\" title=\"위빙 Weaving\"></a>위빙 Weaving</h1><p>위빙(Weaving) 이란? Aspect 클래스에 정의 한 Advice 로직을 타깃(Target)에 적용하는 것을 의미한다.<br>위빙 방법으로는 RTW, CTW, LTW 3가지가 있다.</p>\n<p>##런타임 시, 위빙 (RTW: Runtime Weaving)</p>\n<p>Spring AOP에서 사용하는 위빙 방식이다. Proxy를 생성하여 실제 타깃(Target) 오브젝트의 변형없이 위빙을 수행한다.<br>실제 런타임 상, Method 호출 시에 위빙이 이루어 지는 방식이다.<br>소스파일, 클래스 파일에 대한 변형이 없다는 장점이 있지만, 포인트 컷에 대한 어드바이스 적용 갯수가 늘어 날수록 성능이 떨어진다는 단점이 있다. 또한 메소드 호출에 대해서만 어드바이스를 적용 할 수 있다.</p>\n<p><img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRArzBX0BqyZ3iAK8yaBbFHkewLoHMLGLEy_BEUkOzZ6g5IBXTcNw\" alt=\"Spring aopì ëí ì´ë¯¸ì§ ê²ìê²°ê³¼\">\\</p>\n<h2 id=\"컴파일-시-위빙-CTW-Compile-time-Weaving\"><a href=\"#컴파일-시-위빙-CTW-Compile-time-Weaving\" class=\"headerlink\" title=\"컴파일 시, 위빙 (CTW: Compile time Weaving)\"></a>컴파일 시, 위빙 (CTW: Compile time Weaving)</h2><p>AspectJ에는 AJC (AspectJ Compiler)라는 컴파일러가 있는데 Java Compiler를 확장한 형태의 컴파일러이다.<br>AJC를 통해 java파일을 컴파일 하며, 컴파일 과정에서 바이트 코드 조작을 통해 Advisor 코드를 직접 삽입하여 위빙을 수행한다.<br>장점으로는 3가지 위빙 중에서는 가장 빠른 퍼포먼스를 보여준다. (JVM 상에 올라갈 때 메소드 내에 이미 advise 코드가 삽입 되어있기 때문) 하지만 컴파일 과정에서 lombok과 같이 컴파일 과정에서 코드를 조작하는 플러그인과 충돌이 발생할 가능성이 아주 높다. (거의 같이 사용 불가)</p>\n<h3 id=\"CTW를-사용하기-위한-메이븐-설정\"><a href=\"#CTW를-사용하기-위한-메이븐-설정\" class=\"headerlink\" title=\"CTW를 사용하기 위한 메이븐 설정\"></a>CTW를 사용하기 위한 메이븐 설정</h3><p><strong>라이브러리 추가:</strong> (pom.xml)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjrt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>플러그인 설정:</strong> (pom.xml)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.codehaus.mojo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectj-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">showWeaveInfo</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">showWeaveInfo</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>$&#123;aspectj-compiler.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>$&#123;aspectj-compiler.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">verbose</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">verbose</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">complianceLevel</span>&gt;</span>$&#123;aspectj-compiler.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">complianceLevel</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">outxml</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">outxml</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>test-compile<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>(\\</em>IntelliJ를 사용하고 있다면 설정에서 컴파일러를 AJC 로 변경하여 손쉽게 CTW를 사용할 수 있다.)*</p>\n<p>위의 플러그인 설정은 mojohaus에 제공하는 aspects-maven-plugin을 사용 </p>\n<p>AspectJ Compiler(AJC)를 사용하여 AspectJ Aspect를 클래스에 적용</p>\n<p><img src=\"/var/folders/kw/rqny4sdn787dzr4v7013w0qr0000gn/T/abnerworks.Typora/image-20180722202803438.png\" alt=\"image-20180722202803438\"></p>\n<h2 id=\"클래스-로드-시-위빙-LTW-Load-time-Weaving\"><a href=\"#클래스-로드-시-위빙-LTW-Load-time-Weaving\" class=\"headerlink\" title=\"클래스 로드 시, 위빙 (LTW: Load time Weaving)\"></a>클래스 로드 시, 위빙 (LTW: Load time Weaving)</h2><p> ClassLoader를 이용하여 클래스가 JVM에 로드 될 때 바이트 코드 조작을 통해 위빙이 되는 방식<br>RTW처럼 소스파일과 클래스 파일에 조작을 가하지 않아 컴파일 시간은 상대적으로 CTW보다 짧다. 하지만 오브젝트가 메모리에 올라가는 과정에서 위빙이 일어나기 때문에 런타임 시, 시간은 CTW보다 상대적으로 느리다.<br>Application Context에 객체가 로드될 때, aspectj weaver와 spring-instrument에 의한 객체 handling이 발생하기 때문에 performance가 저하된다.</p>\n<p>그리고 설정이 가장 복잡하지 않은가 싶다..</p>\n<p>아래 내용들은 LTW를 사용하기 위해 해줘야 하는 설정들이다.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:load-time-weaver</span>/&gt;</span> <span class=\"comment\">&lt;!-- 스프링 설정 파일에 추가 servlet.xml --&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableLoadTimeWeaving</span> <span class=\"comment\">//Java Configuration에서 해당 LTW기능을 사용하도록 설정해준다.</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//IDE에서 개발 시, 해당 설정을 추가</span><br><span class=\"line\">-javaagent:/fullpath/aspectjweaver-1.8.1.jar </span><br><span class=\"line\">-javaagent:/fullpath/spring-instrument-4.0.6.RELEASE.jar</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//톰캣 시작 시, jvmargs 옵션에 추가</span><br><span class=\"line\">-javaagent:/weavers/spring-instrument-4.0.6.RELEASE.jar</span><br></pre></td></tr></table></figure>\n<h1 id=\"Annotations\"><a href=\"#Annotations\" class=\"headerlink\" title=\"Annotations\"></a>Annotations</h1><h2 id=\"JoinPoint-관련-Annotations\"><a href=\"#JoinPoint-관련-Annotations\" class=\"headerlink\" title=\"JoinPoint 관련 Annotations\"></a>JoinPoint 관련 Annotations</h2><p>공통적으로 pointcut에 대한 표현식을 인자로 받는다.</p>\n<ul>\n<li>@Before<ul>\n<li>메소드 실행 이전 부분에 대한 Joinpoint 설정</li>\n</ul>\n</li>\n<li>@Around<ul>\n<li>ProceedingJoinPoint라는 파라미터를 이용하여 Target메소드 실행을 직접 제어 할 수 있다.</li>\n<li>메소드 실행 시점을 기준으로 AOP로직을 구현할 수 있어 가장 강력하게 사용이 가능하다.</li>\n</ul>\n</li>\n<li>@After<ul>\n<li>메소드 실행 이후 부분의 대한 Joinpoint 설정</li>\n</ul>\n</li>\n<li>@AfterReturning<ul>\n<li>메소드 실행 이후 return 실행 이후 부분에 대한 Joinpoint 설정</li>\n</ul>\n</li>\n<li>@AfterThrowable<ul>\n<li>메소드 실행 시, Throw 이후 부분에 대한 Joinpoint 설정</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Pointcut-관련-Annotation\"><a href=\"#Pointcut-관련-Annotation\" class=\"headerlink\" title=\"Pointcut 관련 Annotation\"></a>Pointcut 관련 Annotation</h2><ul>\n<li>@Pointcut<ul>\n<li>Pointcut에 대한 표현식을 값으로 가짐</li>\n<li>@Pointcut이 적용된 메소드는 무조건 리턴타입이 void</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Point-Cut\"><a href=\"#Point-Cut\" class=\"headerlink\" title=\"Point Cut\"></a>Point Cut</h1><p>포인트 컷이란? 메소드의 Joinpoint에 대한 Advice가 언제 실행될 지를 지정하는데 사용한다.<br>여러 메소드의 Joinpoint시점 여러개를 묶어 하나의 pointcut으로 만들 수 있다.</p>\n<p><img src=\"https://t1.daumcdn.net/cfile/tistory/223B623D548C415631\" alt=\"pointcut 개념\"></p>\n<h2 id=\"포인트-컷-표현식\"><a href=\"#포인트-컷-표현식\" class=\"headerlink\" title=\"포인트 컷 표현식\"></a>포인트 컷 표현식</h2><p>Expression을 이용한 pointcut 표현식</p>\n<p><img src=\"http://1.bp.blogspot.com/-pKNhsebIDls/VhWk6fUzqJI/AAAAAAAAAU0/dl6e6V3G1KE/s1600/pointcut%2Bexpression-execution.jpg\" alt=\"pointcut ííìì ëí ì´ë¯¸ì§ ê²ìê²°ê³¼\"></p>\n<ol>\n<li><p>접근 제어자 패턴 public이나 protected (private는 사용하지 말자 proxy구현 불가)</p>\n<ul>\n<li>* 인 경우 모든 접근제어자에 대해 설정 가능</li>\n<li>생략 시, * 과 같은 효과</li>\n</ul>\n</li>\n<li><p>리턴 타입 : 메소드의 리턴 타입을 지정한다. (해당 타입으로 리턴되는 모든 메소드에 대한 Pointcut)</p>\n<ul>\n<li>필수 적으로 기재해야 한다.</li>\n<li>* 을 통해 모든 리턴 타입에 대해 Pointcut을 설정 할 수 있다.</li>\n</ul>\n</li>\n<li>Class 타입 : 클래스 타입 패턴 (해당 클래스에 대한 모든 메소드에 대해 Pointcut)<ul>\n<li>단, 패키지 명도 기재해야 함 </li>\n<li>com.springframework.aop.. 처럼 ..으로 붙이는 경우 하위 패키지에 대한 모든 클래스의 모든 메소드에 대해 Pointcut을 처리</li>\n<li>필수 적으로 기재해야 한다.</li>\n</ul>\n</li>\n<li>메소드 명 : 특정 클래스 또는 패키지 하위의 메소드 명에 대해 Pointcut 설정<ul>\n<li>필수 적으로 기재해야 한다.</li>\n<li>모든 메소드에 적용 하려면 * 을 사용</li>\n</ul>\n</li>\n<li>파라미터 타입 : 메소드의 파라미터 타입에 따른 Pointcut 설정<ul>\n<li>필수 적으로 기재해야 한다.</li>\n<li>,로 구분하여 순서대로 파라미터를 기재한다.</li>\n<li>타입과 갯수에 상관없다면 .. 또는 * 를 기재한다.</li>\n</ul>\n</li>\n<li>예외 타입 : 예외 클래스에 대해 Joinpoint를 설정 할 수 있다. (생략가능)</li>\n</ol>\n<h2 id=\"예시\"><a href=\"#예시\" class=\"headerlink\" title=\"예시\"></a>예시</h2><ul>\n<li><p><strong>execution(int minus(int, int))</strong>: int 타입의 리턴 값, minus 라는 메소드 이름, 두 개의 int 파라미터를 가지는 메소드</p>\n</li>\n<li><p><strong>execution(* minus(int, int))</strong>: 리턴 타입은 상관없이, minus 라는 메소드 이름, 두 개의 int 파라미터를 가지는 메소드</p>\n</li>\n<li><p><strong>execution(* minus(..))</strong>: 리턴 타입과 파라미터의 종류 및 개수에 상관없이 minus 이름을 가진 메소드</p>\n</li>\n<li><p><strong>execution(* *(..))</strong>: 리턴 타입, 파라미터, 메소드 이름에 상관없는 모든 메소드</p>\n</li>\n<li><p><strong>execution(* *())</strong>: 리턴 타입, 메소드 이름에 상관없고 파라미터는 없는 모든 메소드</p>\n</li>\n<li><p><strong>execution(* springbook.aop.Target.*(..))</strong>: springbook.aop.Target 클래스의 모든 메소드</p>\n</li>\n<li><p><strong>execution(* springbook.aop.<em>.</em>(..))</strong>: springbook.aop 패키지의 모든 메소드, 단 서브패키지의 클래스는 포함 안된다.</p>\n</li>\n<li><p><strong>execution(* springbook.aop..<em>.</em>(..))</strong>: springbook.aop 패키지의 모든 메소드, 서브패키지의 클래스까지 포함</p>\n</li>\n<li><p><strong>execution(* <em>..Target.</em>(..))</strong>: 패키지에는 상관없이 Target 클래스의 모든 메소드</p>\n</li>\n<li><p><strong>execution(<em> </em>(..) throws Exception) </strong>: Exception을 throw하는 모든 메소드</p>\n</li>\n<li><p><strong>within(com.springbook.aop.service.*</strong>) : service 패키지 내의 모든 Joinpoint</p>\n</li>\n<li><p><strong>within(com.springbook.aop.service..*</strong>) : service 패키지의 하위패키지 내의 모든 Joinpoint</p>\n</li>\n<li><p><strong>this(com.springbook.aop.service.UserService)</strong> : UserService 인터페이스를 구현하는 프록시 객체의 모든 Joinpoint</p>\n</li>\n<li><p><strong>target(com.springbook.aop.service.UserService)</strong> : UserService 인터페이스를 구현하는 대상 객체의 모든 Joinpoint</p>\n</li>\n<li><p><strong>args(java.utils.List)</strong> : 파라미터가 1개이고 List타입인 모든 Joinpoint</p>\n</li>\n<li><p><strong>@target(org.springframework.transaction.annotation.Transactional)</strong> :대상 객체가 @Transactional 어노테이션을 갖는 모든 결합점</p>\n</li>\n<li><p><strong>@within(org.springframework.transaction.annotation.Transactional)</strong> : 대상 객체의 선언 타입이 @Transactional 어노테이션을 갖는 모든 결합점</p>\n</li>\n<li><p><strong>@annotation(org.springframework.transaction.annotation.Transactional)</strong> : 실행 메소드가 @Transactional 어노테이션을 갖는 모든 결합점</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>@args(com.xyz.security.Classified)</strong> : 단일 파라미터를 받고, 전달된 인자 타입이 @Classified 어노테이션을 갖는 모든 결합점</p>\n</li>\n<li><p><strong>bean(UserRepository)</strong> : “UserRepository” 빈</p>\n</li>\n<li><p><strong>!bean(UserRepository)</strong> :  “UserRepository” 빈을 제외한 모든 빈</p>\n</li>\n<li><p><strong>bean(*)</strong> : 모든 빈</p>\n</li>\n<li><p><strong>bean(user*)</strong> : 이름이 ‘user’로 시작되는 모든 빈</p>\n</li>\n<li><p><strong>bean(*Repository)</strong> : 이름이 “Repository”로 끝나는 모든 빈</p>\n</li>\n<li><p><strong>bean(user/*)</strong> : 이름이 “user/“로 시작하는 모든 빈</p>\n</li>\n<li><p><strong>bean(<em>dataSource) || bean(</em>DataSource)</strong> : 이름이 “dataSource” 나 “DataSource” 으로 끝나는 모든 빈</p>\n</li>\n</ul>\n<h1 id=\"예시코드\"><a href=\"#예시코드\" class=\"headerlink\" title=\"예시코드\"></a>예시코드</h1><h2 id=\"Aspect-파일-사용\"><a href=\"#Aspect-파일-사용\" class=\"headerlink\" title=\"Aspect 파일 사용\"></a>Aspect 파일 사용</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> aspect TestAdvisor &#123;</span><br><span class=\"line\">    <span class=\"function\">pointcut <span class=\"title\">advicePoint</span><span class=\"params\">()</span> : <span class=\"title\">execution</span><span class=\"params\">(* com.example.advice..*(..)</span>)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    after(Joinpoint joinpoint) : advicePoint() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"처음으로 실행되는 로그\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    after(Joinpoint joinpoint) : advicePoint() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"두번째로 실행되는 로그\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//order는 어떻게 주는건지 모르겠다.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Aspect-어노테이션-사용\"><a href=\"#Aspect-어노테이션-사용\" class=\"headerlink\" title=\"@Aspect 어노테이션 사용\"></a>@Aspect 어노테이션 사용</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestAdvisor</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * advice패키지 하위의 모든 클래스의 모든 메소드에 대한 pointcut</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.example.advice..*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pointcut</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@order</span>(<span class=\"number\">2</span>) <span class=\"comment\">//order가 높은 순으로 먼저 실행</span></span><br><span class=\"line\">    <span class=\"meta\">@After</span>(pointcut=<span class=\"string\">\"pointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterAdvice</span><span class=\"params\">(Joinpoint joinpoint)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"처음으로 실행되는 로그\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@order</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"meta\">@After</span>(pointcut=<span class=\"string\">\"pointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showLog</span><span class=\"params\">(Joinpoint joinpoint)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"두번째로 실행되는 로그\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"참고\"><a href=\"#참고\" class=\"headerlink\" title=\"참고\"></a>참고</h1><p><a href=\"http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220564638014\" target=\"_blank\" rel=\"noopener\">http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220564638014</a></p>\n<p><a href=\"http://netframework.tistory.com/entry/LTW-CTW%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-Transactional%EC%9D%98-%EC%82%AC%EC%9A%A9\" target=\"_blank\" rel=\"noopener\">http://netframework.tistory.com/entry/LTW-CTW%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-Transactional%EC%9D%98-%EC%82%AC%EC%9A%A9</a></p>\n<p><a href=\"https://steemit.com/kr-dev/@nhj12311/aop-aspectj-java-aop-5\" target=\"_blank\" rel=\"noopener\">https://steemit.com/kr-dev/@nhj12311/aop-aspectj-java-aop-5</a></p>\n"},{"layout":"post","title":"Spring AOP (5)","subtitle":"5. Custom Annotation Pointcut","date":"2018-07-24T14:14:33.000Z","background":"/img/posts/06.jpg","_content":"\n\n\nAOP를 어느정도 공부하고 회사 업무에 써먹어 보기로 했다.\n결제에 대한 로그 데이터를 DB에 Insert하는 로직을 AOP로 구현하고 코드 리뷰를 딱! 올렸다.\nAOP사용 시 주의 할 부분에 대한 리뷰가 달렸다.\n아래의 리뷰와 같다.\n\n![AOP코드리뷰](/Users/carrey/Desktop/jaehun2841.github.io/img/2018-07-24/aop5/AOP코드리뷰.png)\n\n메소드 명에 대한 와일드 카드 처리는 AOP를 설정한지 모르는 다른 개발자가 똑같은 prefix로 시작하는 경우 의도치 않은 Advice로직을 적용 시킬 수 있기 때문에 주의를 강조 했다.\n\n이를 극복 할 수 있는 방법으로 Custom Annotation 클래스를 생성하여 메소드의 Annotation으로 pointcut을 잡아 보는 것을 알아보았다.\n\n\n\n# Custom Annotation\n\nAPI에서 지정된 Annotation 이외에 개발자가 필요로 목적으로 정의한 Annotation을 말한다.\n\n\n\n## Annotation 생성하기\n\n~~~java\nimport java.lang.annotation.*;\n\n@Inherited  //Annotation의 상속이 가능함 \n@Documented //JavaDoc 문서 추가 가능\n@Retention(RetentionPolicy.RUNTIME) // 컴파일 이후에도 JVM에 의해서 참조가 가능\n//@Retention(RetentionPolicy.CLASS) // 컴파일러가 클래스를 참조할 때까지 유효\n//@Retention(RetentionPolicy.SOURCE) // 어노테이션 정보는 컴파일 이후 사라짐 (ex. lombok)\n@Target({\n        ElementType.PACKAGE,         // 패키지 선언시\n        ElementType.TYPE,            // 타입 선언시\n        ElementType.CONSTRUCTOR,     // 생성자 선언시\n        ElementType.FIELD,           // 멤버 변수 선언시\n        ElementType.METHOD,          // 메소드 선언시\n        ElementType.ANNOTATION_TYPE, // 어노테이션 타입 선언시\n        ElementType.LOCAL_VARIABLE,  // 지역 변수 선언시\n        ElementType.PARAMETER,       // 매개 변수 선언시\n        ElementType.TYPE_PARAMETER,  // 매개 변수 타입 선언시\n        ElementType.TYPE_USE         // 타입 사용시\n})\npublic @interface CustomAnnotation {  //interface에 @를 붙여주면 Annotation으로 등록\n    /* enum 타입을 선언할 수 있습니다. */\n    public enum Quality {BAD, GOOD, VERYGOOD}\n    /* String은 기본 자료형은 아니지만 사용 가능합니다. */\n    String value();\n    /* 배열 형태로도 사용할 수 있습니다. */\n    int[] values();\n    /* enum 형태를 사용하는 방법입니다. */\n    Quality quality() default Quality.GOOD;\n}\n~~~\n\n\n\n## Annotation Pointcut 지정하기\n\n예시로 Annotation을 추가하여 Pointcut을 설정해 보았다.\n\n~~~java\npackage com.example.aopexam;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.ComponentScan;\n\n@SpringBootApplication\n//AOP Advisor를 Component로 선언하여 ComponentScan이 되어야 AOP적용 가능\n@ComponentScan(value={\"com.example.aopexam\", \"com.example.custom.annotation\"})\npublic class AopExamApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AopExamApplication.class, args);\n    }\n}\n\n~~~\n\n~~~java\npackage com.example.aopexam;\n\nimport com.example.custom.annotation.CustomLog;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/api/aop-test\")\npublic class ApiController {\n\n    @Autowired\n    private ApiService apiService;\n\n    @GetMapping\n    @CustomLog //get 메소드에 @CustomLog추가\n    public void getTest() {\n        apiService.method(ApiType.GET);\n    }\n\n    @PostMapping\n    public void postTest() {\n        apiService.method(ApiType.POST);\n    }\n\n    @PutMapping\n    public void putTest() {\n        apiService.method(ApiType.PUT);\n    }\n\n    @DeleteMapping\n    public void deleteTest() {\n        apiService.method(ApiType.DELETE);\n    }\n\n}\n~~~\n\n~~~java\npackage com.example.custom.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD) //메소드 어노테이션 적용\npublic @interface CustomLog {\n}\n\n~~~\n\n~~~java\npackage com.example.custom.annotation;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.context.annotation.EnableAspectJAutoProxy;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@EnableAspectJAutoProxy(proxyTargetClass = true) //cglib 사용 -> class기반 proxy생성\n@Component\npublic class CustomLogAdvisor {\n\n    //Annotation을 기준으로 pointcut설정\n    @Pointcut(\"@annotation(com.example.custom.annotation.CustomLog)\")\n    public void customLogPointcut() {\n    }\n\n    @Before(value=\"customLogPointcut()\")\n    public void pringLog() {\n        System.out.println(\"메소드 실행 전 무조건 이 로그를 보게 될 것이야...\");\n    }\n}\n~~~\n\n~~~log\nhttp://localhost:8080/api/aop-test\n\n메소드 실행 전 무조건 이 로그를 보게 될 것이야...\n[ApiService.method] apiType : GET\n~~~\n\n","source":"_posts/2018-07-24-spring-aop5.md","raw":"---\nlayout: post\ntitle:  \"Spring AOP (5)\"\nsubtitle: \"5. Custom Annotation Pointcut\"\ndate:   2018-07-24 23:14:33 +0900\nbackground: '/img/posts/06.jpg'\n---\n\n\n\nAOP를 어느정도 공부하고 회사 업무에 써먹어 보기로 했다.\n결제에 대한 로그 데이터를 DB에 Insert하는 로직을 AOP로 구현하고 코드 리뷰를 딱! 올렸다.\nAOP사용 시 주의 할 부분에 대한 리뷰가 달렸다.\n아래의 리뷰와 같다.\n\n![AOP코드리뷰](/Users/carrey/Desktop/jaehun2841.github.io/img/2018-07-24/aop5/AOP코드리뷰.png)\n\n메소드 명에 대한 와일드 카드 처리는 AOP를 설정한지 모르는 다른 개발자가 똑같은 prefix로 시작하는 경우 의도치 않은 Advice로직을 적용 시킬 수 있기 때문에 주의를 강조 했다.\n\n이를 극복 할 수 있는 방법으로 Custom Annotation 클래스를 생성하여 메소드의 Annotation으로 pointcut을 잡아 보는 것을 알아보았다.\n\n\n\n# Custom Annotation\n\nAPI에서 지정된 Annotation 이외에 개발자가 필요로 목적으로 정의한 Annotation을 말한다.\n\n\n\n## Annotation 생성하기\n\n~~~java\nimport java.lang.annotation.*;\n\n@Inherited  //Annotation의 상속이 가능함 \n@Documented //JavaDoc 문서 추가 가능\n@Retention(RetentionPolicy.RUNTIME) // 컴파일 이후에도 JVM에 의해서 참조가 가능\n//@Retention(RetentionPolicy.CLASS) // 컴파일러가 클래스를 참조할 때까지 유효\n//@Retention(RetentionPolicy.SOURCE) // 어노테이션 정보는 컴파일 이후 사라짐 (ex. lombok)\n@Target({\n        ElementType.PACKAGE,         // 패키지 선언시\n        ElementType.TYPE,            // 타입 선언시\n        ElementType.CONSTRUCTOR,     // 생성자 선언시\n        ElementType.FIELD,           // 멤버 변수 선언시\n        ElementType.METHOD,          // 메소드 선언시\n        ElementType.ANNOTATION_TYPE, // 어노테이션 타입 선언시\n        ElementType.LOCAL_VARIABLE,  // 지역 변수 선언시\n        ElementType.PARAMETER,       // 매개 변수 선언시\n        ElementType.TYPE_PARAMETER,  // 매개 변수 타입 선언시\n        ElementType.TYPE_USE         // 타입 사용시\n})\npublic @interface CustomAnnotation {  //interface에 @를 붙여주면 Annotation으로 등록\n    /* enum 타입을 선언할 수 있습니다. */\n    public enum Quality {BAD, GOOD, VERYGOOD}\n    /* String은 기본 자료형은 아니지만 사용 가능합니다. */\n    String value();\n    /* 배열 형태로도 사용할 수 있습니다. */\n    int[] values();\n    /* enum 형태를 사용하는 방법입니다. */\n    Quality quality() default Quality.GOOD;\n}\n~~~\n\n\n\n## Annotation Pointcut 지정하기\n\n예시로 Annotation을 추가하여 Pointcut을 설정해 보았다.\n\n~~~java\npackage com.example.aopexam;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.ComponentScan;\n\n@SpringBootApplication\n//AOP Advisor를 Component로 선언하여 ComponentScan이 되어야 AOP적용 가능\n@ComponentScan(value={\"com.example.aopexam\", \"com.example.custom.annotation\"})\npublic class AopExamApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AopExamApplication.class, args);\n    }\n}\n\n~~~\n\n~~~java\npackage com.example.aopexam;\n\nimport com.example.custom.annotation.CustomLog;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/api/aop-test\")\npublic class ApiController {\n\n    @Autowired\n    private ApiService apiService;\n\n    @GetMapping\n    @CustomLog //get 메소드에 @CustomLog추가\n    public void getTest() {\n        apiService.method(ApiType.GET);\n    }\n\n    @PostMapping\n    public void postTest() {\n        apiService.method(ApiType.POST);\n    }\n\n    @PutMapping\n    public void putTest() {\n        apiService.method(ApiType.PUT);\n    }\n\n    @DeleteMapping\n    public void deleteTest() {\n        apiService.method(ApiType.DELETE);\n    }\n\n}\n~~~\n\n~~~java\npackage com.example.custom.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD) //메소드 어노테이션 적용\npublic @interface CustomLog {\n}\n\n~~~\n\n~~~java\npackage com.example.custom.annotation;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.context.annotation.EnableAspectJAutoProxy;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@EnableAspectJAutoProxy(proxyTargetClass = true) //cglib 사용 -> class기반 proxy생성\n@Component\npublic class CustomLogAdvisor {\n\n    //Annotation을 기준으로 pointcut설정\n    @Pointcut(\"@annotation(com.example.custom.annotation.CustomLog)\")\n    public void customLogPointcut() {\n    }\n\n    @Before(value=\"customLogPointcut()\")\n    public void pringLog() {\n        System.out.println(\"메소드 실행 전 무조건 이 로그를 보게 될 것이야...\");\n    }\n}\n~~~\n\n~~~log\nhttp://localhost:8080/api/aop-test\n\n메소드 실행 전 무조건 이 로그를 보게 될 것이야...\n[ApiService.method] apiType : GET\n~~~\n\n","slug":"2018-07-24-spring-aop5","published":1,"updated":"2018-07-24T15:55:14.574Z","comments":1,"photos":[],"link":"","_id":"cjkic64ov0004vcyaa0htlh5m","content":"<p>AOP를 어느정도 공부하고 회사 업무에 써먹어 보기로 했다.<br>결제에 대한 로그 데이터를 DB에 Insert하는 로직을 AOP로 구현하고 코드 리뷰를 딱! 올렸다.<br>AOP사용 시 주의 할 부분에 대한 리뷰가 달렸다.<br>아래의 리뷰와 같다.</p>\n<p><img src=\"/Users/carrey/Desktop/jaehun2841.github.io/img/2018-07-24/aop5/AOP코드리뷰.png\" alt=\"AOP코드리뷰\"></p>\n<p>메소드 명에 대한 와일드 카드 처리는 AOP를 설정한지 모르는 다른 개발자가 똑같은 prefix로 시작하는 경우 의도치 않은 Advice로직을 적용 시킬 수 있기 때문에 주의를 강조 했다.</p>\n<p>이를 극복 할 수 있는 방법으로 Custom Annotation 클래스를 생성하여 메소드의 Annotation으로 pointcut을 잡아 보는 것을 알아보았다.</p>\n<h1 id=\"Custom-Annotation\"><a href=\"#Custom-Annotation\" class=\"headerlink\" title=\"Custom Annotation\"></a>Custom Annotation</h1><p>API에서 지정된 Annotation 이외에 개발자가 필요로 목적으로 정의한 Annotation을 말한다.</p>\n<h2 id=\"Annotation-생성하기\"><a href=\"#Annotation-생성하기\" class=\"headerlink\" title=\"Annotation 생성하기\"></a>Annotation 생성하기</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span>  <span class=\"comment\">//Annotation의 상속이 가능함 </span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span> <span class=\"comment\">//JavaDoc 문서 추가 가능</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME) <span class=\"comment\">// 컴파일 이후에도 JVM에 의해서 참조가 가능</span></span><br><span class=\"line\"><span class=\"comment\">//@Retention(RetentionPolicy.CLASS) // 컴파일러가 클래스를 참조할 때까지 유효</span></span><br><span class=\"line\"><span class=\"comment\">//@Retention(RetentionPolicy.SOURCE) // 어노테이션 정보는 컴파일 이후 사라짐 (ex. lombok)</span></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;</span><br><span class=\"line\">        ElementType.PACKAGE,         <span class=\"comment\">// 패키지 선언시</span></span><br><span class=\"line\">        ElementType.TYPE,            <span class=\"comment\">// 타입 선언시</span></span><br><span class=\"line\">        ElementType.CONSTRUCTOR,     <span class=\"comment\">// 생성자 선언시</span></span><br><span class=\"line\">        ElementType.FIELD,           <span class=\"comment\">// 멤버 변수 선언시</span></span><br><span class=\"line\">        ElementType.METHOD,          <span class=\"comment\">// 메소드 선언시</span></span><br><span class=\"line\">        ElementType.ANNOTATION_TYPE, <span class=\"comment\">// 어노테이션 타입 선언시</span></span><br><span class=\"line\">        ElementType.LOCAL_VARIABLE,  <span class=\"comment\">// 지역 변수 선언시</span></span><br><span class=\"line\">        ElementType.PARAMETER,       <span class=\"comment\">// 매개 변수 선언시</span></span><br><span class=\"line\">        ElementType.TYPE_PARAMETER,  <span class=\"comment\">// 매개 변수 타입 선언시</span></span><br><span class=\"line\">        ElementType.TYPE_USE         <span class=\"comment\">// 타입 사용시</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CustomAnnotation &#123;  <span class=\"comment\">//interface에 @를 붙여주면 Annotation으로 등록</span></span><br><span class=\"line\">    <span class=\"comment\">/* enum 타입을 선언할 수 있습니다. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Quality &#123;BAD, GOOD, VERYGOOD&#125;</span><br><span class=\"line\">    <span class=\"comment\">/* String은 기본 자료형은 아니지만 사용 가능합니다. */</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/* 배열 형태로도 사용할 수 있습니다. */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] values();</span><br><span class=\"line\">    <span class=\"comment\">/* enum 형태를 사용하는 방법입니다. */</span></span><br><span class=\"line\">    <span class=\"function\">Quality <span class=\"title\">quality</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> Quality.GOOD</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Annotation-Pointcut-지정하기\"><a href=\"#Annotation-Pointcut-지정하기\" class=\"headerlink\" title=\"Annotation Pointcut 지정하기\"></a>Annotation Pointcut 지정하기</h2><p>예시로 Annotation을 추가하여 Pointcut을 설정해 보았다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.aopexam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"comment\">//AOP Advisor를 Component로 선언하여 ComponentScan이 되어야 AOP적용 가능</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(value=&#123;<span class=\"string\">\"com.example.aopexam\"</span>, <span class=\"string\">\"com.example.custom.annotation\"</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AopExamApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(AopExamApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.aopexam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.custom.annotation.CustomLog;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/aop-test\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApiController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ApiService apiService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span></span><br><span class=\"line\">    <span class=\"meta\">@CustomLog</span> <span class=\"comment\">//get 메소드에 @CustomLog추가</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        apiService.method(ApiType.GET);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        apiService.method(ApiType.POST);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PutMapping</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">putTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        apiService.method(ApiType.PUT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@DeleteMapping</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        apiService.method(ApiType.DELETE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.custom.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD) <span class=\"comment\">//메소드 어노테이션 적용</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CustomLog &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.custom.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class=\"keyword\">true</span>) <span class=\"comment\">//cglib 사용 -&gt; class기반 proxy생성</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomLogAdvisor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Annotation을 기준으로 pointcut설정</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.example.custom.annotation.CustomLog)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customLogPointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(value=<span class=\"string\">\"customLogPointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pringLog</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"메소드 실행 전 무조건 이 로그를 보게 될 것이야...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/api/aop-test</span><br><span class=\"line\"></span><br><span class=\"line\">메소드 실행 전 무조건 이 로그를 보게 될 것이야...</span><br><span class=\"line\">[ApiService.method] apiType : GET</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>AOP를 어느정도 공부하고 회사 업무에 써먹어 보기로 했다.<br>결제에 대한 로그 데이터를 DB에 Insert하는 로직을 AOP로 구현하고 코드 리뷰를 딱! 올렸다.<br>AOP사용 시 주의 할 부분에 대한 리뷰가 달렸다.<br>아래의 리뷰와 같다.</p>\n<p><img src=\"/Users/carrey/Desktop/jaehun2841.github.io/img/2018-07-24/aop5/AOP코드리뷰.png\" alt=\"AOP코드리뷰\"></p>\n<p>메소드 명에 대한 와일드 카드 처리는 AOP를 설정한지 모르는 다른 개발자가 똑같은 prefix로 시작하는 경우 의도치 않은 Advice로직을 적용 시킬 수 있기 때문에 주의를 강조 했다.</p>\n<p>이를 극복 할 수 있는 방법으로 Custom Annotation 클래스를 생성하여 메소드의 Annotation으로 pointcut을 잡아 보는 것을 알아보았다.</p>\n<h1 id=\"Custom-Annotation\"><a href=\"#Custom-Annotation\" class=\"headerlink\" title=\"Custom Annotation\"></a>Custom Annotation</h1><p>API에서 지정된 Annotation 이외에 개발자가 필요로 목적으로 정의한 Annotation을 말한다.</p>\n<h2 id=\"Annotation-생성하기\"><a href=\"#Annotation-생성하기\" class=\"headerlink\" title=\"Annotation 생성하기\"></a>Annotation 생성하기</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span>  <span class=\"comment\">//Annotation의 상속이 가능함 </span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span> <span class=\"comment\">//JavaDoc 문서 추가 가능</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME) <span class=\"comment\">// 컴파일 이후에도 JVM에 의해서 참조가 가능</span></span><br><span class=\"line\"><span class=\"comment\">//@Retention(RetentionPolicy.CLASS) // 컴파일러가 클래스를 참조할 때까지 유효</span></span><br><span class=\"line\"><span class=\"comment\">//@Retention(RetentionPolicy.SOURCE) // 어노테이션 정보는 컴파일 이후 사라짐 (ex. lombok)</span></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;</span><br><span class=\"line\">        ElementType.PACKAGE,         <span class=\"comment\">// 패키지 선언시</span></span><br><span class=\"line\">        ElementType.TYPE,            <span class=\"comment\">// 타입 선언시</span></span><br><span class=\"line\">        ElementType.CONSTRUCTOR,     <span class=\"comment\">// 생성자 선언시</span></span><br><span class=\"line\">        ElementType.FIELD,           <span class=\"comment\">// 멤버 변수 선언시</span></span><br><span class=\"line\">        ElementType.METHOD,          <span class=\"comment\">// 메소드 선언시</span></span><br><span class=\"line\">        ElementType.ANNOTATION_TYPE, <span class=\"comment\">// 어노테이션 타입 선언시</span></span><br><span class=\"line\">        ElementType.LOCAL_VARIABLE,  <span class=\"comment\">// 지역 변수 선언시</span></span><br><span class=\"line\">        ElementType.PARAMETER,       <span class=\"comment\">// 매개 변수 선언시</span></span><br><span class=\"line\">        ElementType.TYPE_PARAMETER,  <span class=\"comment\">// 매개 변수 타입 선언시</span></span><br><span class=\"line\">        ElementType.TYPE_USE         <span class=\"comment\">// 타입 사용시</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CustomAnnotation &#123;  <span class=\"comment\">//interface에 @를 붙여주면 Annotation으로 등록</span></span><br><span class=\"line\">    <span class=\"comment\">/* enum 타입을 선언할 수 있습니다. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Quality &#123;BAD, GOOD, VERYGOOD&#125;</span><br><span class=\"line\">    <span class=\"comment\">/* String은 기본 자료형은 아니지만 사용 가능합니다. */</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/* 배열 형태로도 사용할 수 있습니다. */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] values();</span><br><span class=\"line\">    <span class=\"comment\">/* enum 형태를 사용하는 방법입니다. */</span></span><br><span class=\"line\">    <span class=\"function\">Quality <span class=\"title\">quality</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> Quality.GOOD</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Annotation-Pointcut-지정하기\"><a href=\"#Annotation-Pointcut-지정하기\" class=\"headerlink\" title=\"Annotation Pointcut 지정하기\"></a>Annotation Pointcut 지정하기</h2><p>예시로 Annotation을 추가하여 Pointcut을 설정해 보았다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.aopexam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"comment\">//AOP Advisor를 Component로 선언하여 ComponentScan이 되어야 AOP적용 가능</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(value=&#123;<span class=\"string\">\"com.example.aopexam\"</span>, <span class=\"string\">\"com.example.custom.annotation\"</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AopExamApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(AopExamApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.aopexam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.custom.annotation.CustomLog;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/aop-test\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApiController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ApiService apiService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span></span><br><span class=\"line\">    <span class=\"meta\">@CustomLog</span> <span class=\"comment\">//get 메소드에 @CustomLog추가</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        apiService.method(ApiType.GET);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        apiService.method(ApiType.POST);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PutMapping</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">putTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        apiService.method(ApiType.PUT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@DeleteMapping</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        apiService.method(ApiType.DELETE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.custom.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD) <span class=\"comment\">//메소드 어노테이션 적용</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CustomLog &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.custom.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class=\"keyword\">true</span>) <span class=\"comment\">//cglib 사용 -&gt; class기반 proxy생성</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomLogAdvisor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Annotation을 기준으로 pointcut설정</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.example.custom.annotation.CustomLog)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customLogPointcut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(value=<span class=\"string\">\"customLogPointcut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pringLog</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"메소드 실행 전 무조건 이 로그를 보게 될 것이야...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/api/aop-test</span><br><span class=\"line\"></span><br><span class=\"line\">메소드 실행 전 무조건 이 로그를 보게 될 것이야...</span><br><span class=\"line\">[ApiService.method] apiType : GET</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}